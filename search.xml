<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>无法登录 Github</title>
      <link href="/2021/11/16/%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95%20Github/"/>
      <url>/2021/11/16/%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95%20Github/</url>
      
        <content type="html"><![CDATA[<h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><p>[GIthub] This site can’t provide a secure connection</p><h3 id="问题描述（对话）"><a href="#问题描述（对话）" class="headerlink" title="问题描述（对话）"></a>问题描述（对话）</h3><p>Hello, I’m getting this error when accessing GitHub from my MacBook. It happens on both chrome and safari. When trying to access from other devices (either iMac or iPhone) everything works fine. Is there any certificate problem on my machine?</p><p>HI, welcome to the GitHub Support Community! It definitely sounds like it might be a certificate problem on your machine, or it could be as something simple as the date and time.</p><p>First, can you please check in <code>System Preferences</code> / <code>Date &amp; Time</code> that the time and date are set correctly on your computer?</p><p>Then, if that is okay, on the error page, please click <code>Advanced</code> and copy/paste the error message.</p><p>Next, please click the <code>⚠️ Not Secure</code> in your address bar and take a screenshot (<code>Cmd-Shift-4</code>) of the certificate chain (or let me know any errors you see on that screen).</p><p>Also, could you please verify which version of macOS you are running (Apple menu / <code>About This Mac</code>) and which version of Chrome you are running (<code>chrome://version</code> in your address bar)?</p><p>The next step would be to check the CA certificates in <code>Keychain Access</code>, based on any errors there. The necessary root CA certificate is <code>DigiCert High Assurance EV Root CA</code>.</p><p>P.S. - This is not a fix, but a short term workaround… you could use Firefox while you are troubleshooting this, as it uses its own certificate store instead of the system Keychain.</p><p>Thanks Allie. Date and time look ok. I’m attaching some screenshots here about what you requested.</p><p>Only thing, I’m using a VPN and don’t know if that may cause an issue. I don’t think so because I use it on all of my devices and the MacBook is the only one not working.</p><h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><h4 id="查看日期"><a href="#查看日期" class="headerlink" title="查看日期"></a>查看日期</h4><p>check in <code>System Preferences</code> / <code>Date &amp; Time</code> that the time and date are set correctly on your computer</p><h4 id="更换设备、网络、浏览器"><a href="#更换设备、网络、浏览器" class="headerlink" title="更换设备、网络、浏览器"></a>更换设备、网络、浏览器</h4><h4 id="查看网络"><a href="#查看网络" class="headerlink" title="查看网络"></a>查看网络</h4><p>System Performances  =&gt;  Network  =&gt; Proxies</p><p>取消 Automatic Proxy Configuration（pac），勾选 Web Proxy、S ecure Web Proxy、SOCKS Proxy ，代理设置为全局，即可成功连接 github</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS61a 学习笔记</title>
      <link href="/2021/11/15/CS61a%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/15/CS61a%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>DBC(Don’t Be Clueless)</p><h2 id="functions"><a href="#functions" class="headerlink" title="functions"></a>functions</h2><h3 id="print-side-effects"><a href="#print-side-effects" class="headerlink" title="print (side effects)"></a>print (side effects)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Print(print(<span class="number">1</span>), print(<span class="number">2</span>)) 输出？</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="function"><a href="#function" class="headerlink" title="function"></a>function</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">id</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">print(<span class="built_in">id</span>(<span class="built_in">id</span>)(<span class="built_in">id</span>(<span class="number">13</span>)))</span><br><span class="line"></span><br><span class="line"><span class="number">13</span> </span><br></pre></td></tr></table></figure><h3 id="false"><a href="#false" class="headerlink" title="false"></a>false</h3><ul><li>False</li><li>None</li><li>0 </li><li>Empty strings、sets、tuples, and dictionaries</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b == <span class="literal">None</span>  <span class="comment"># Equality operator</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="keyword">is</span> <span class="literal">None</span>  <span class="comment"># Identity operator</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="if…-elif"><a href="#if…-elif" class="headerlink" title="if… elif"></a>if… elif</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signum</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">if</span> x == <span class="number">0</span> <span class="keyword">else</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_sq</span>(<span class="params">assum, k, n</span>):</span></span><br><span class="line">  <span class="keyword">if</span> k &gt; n:</span><br><span class="line">    <span class="keyword">return</span> accum</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> add_sq(assum + k ** <span class="number">2</span>, k + <span class="number">1</span>, n)</span><br><span class="line">print(add.sq(<span class="number">0</span>, <span class="number">1</span>, <span class="number">100</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nun_digits</span>(<span class="params">a, radix = <span class="number">10</span></span>):</span></span><br><span class="line">  a_count = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> a &gt;= radix:</span><br><span class="line">    a = a // radix</span><br><span class="line">    a_count += <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> a_acount</span><br></pre></td></tr></table></figure><h2 id="lab01"><a href="#lab01" class="headerlink" title="lab01"></a>lab01</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">how_big</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">10</span>:</span><br><span class="line">        print(<span class="string">&#x27;huge&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> x &gt; <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;big&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">&#x27;small&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;nothing&#x27;</span>)</span><br><span class="line"></span><br><span class="line">how_big(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;big&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="enviroments"><a href="#enviroments" class="headerlink" title="enviroments"></a>enviroments</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span>(<span class="params">p, k</span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">g</span>():</span></span><br><span class="line">    print(k)</span><br><span class="line">   <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">    f(g,<span class="number">1</span>)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">    p()</span><br><span class="line">f(<span class="literal">None</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">  x = x + <span class="number">1</span></span><br><span class="line">y = <span class="number">4</span></span><br><span class="line">f(y)</span><br><span class="line">x = <span class="number">2</span></span><br><span class="line">f(x)</span><br><span class="line">print(y, x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">g</span>(<span class="params">y</span>):</span></span><br><span class="line">    x = y</span><br><span class="line">  g(<span class="number">4</span>)</span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line">print(f(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_sums</span>(<span class="params">n</span>):</span></span><br><span class="line">  print(n)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">next_sum</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="keyword">return</span> print_sums(n + k)</span><br><span class="line">print_sums(<span class="number">1</span>)(<span class="number">3</span>)(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h2><p>A lambda expression does not contain return statements or any statements at all</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">higher_order_lambda = <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(x)</span><br><span class="line">g = <span class="keyword">lambda</span> x: x * x</span><br><span class="line">higher_order_lambda(g)(<span class="number">2</span>) <span class="comment"># Which argument belongs to which function call</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; 4</span></span><br><span class="line"></span><br><span class="line">higher_order_lambda(<span class="number">2</span>)(g) <span class="comment"># Which argument belongs to which function call</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Error</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call_thrice = <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(f(f(x)))</span><br><span class="line">call_thrice(<span class="keyword">lambda</span> y: y + <span class="number">1</span>)(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Basic </tag>
            
            <tag> CS61a </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新消费学习笔记</title>
      <link href="/2021/11/01/%E6%96%B0%E6%B6%88%E8%B4%B9%E8%AE%B2%E5%BA%A7%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/01/%E6%96%B0%E6%B6%88%E8%B4%B9%E8%AE%B2%E5%BA%A7%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>消费万变不离其宗——『人』、  『货』、 『场』</strong>   </p><h3 id="人"><a href="#人" class="headerlink" title="人"></a>人</h3><p>用户群：25岁</p><p>针足够细才能扎进去</p><p>95后移动互联网原住民</p><p>人机分离</p><p>DTC</p><p>悦己 &gt; 悦人</p><p>好看、好玩 &gt; 好用</p><p>成图率、可晒性</p><p>ARPU</p><p>相对快消</p><p>绝对耐用</p><p>合法成瘾行消费</p><h3 id="货"><a href="#货" class="headerlink" title="货"></a>货</h3><h4 id="器材——耗材"><a href="#器材——耗材" class="headerlink" title="器材——耗材"></a>器材——耗材</h4><p>悦刻</p><p>素士</p><p>锅圈食味</p><h3 id="场"><a href="#场" class="headerlink" title="场"></a>场</h3><h4 id="线下开店"><a href="#线下开店" class="headerlink" title="线下开店"></a>线下开店</h4><p>高频低客单价，店要足够小</p><p>低频高客单价，店要足够大</p><p>格乐丽雅</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Business </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notes </tag>
            
            <tag> Thinking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《你不知道的JS》读书笔记</title>
      <link href="/2021/02/04/%E3%80%8A%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JS%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/02/04/%E3%80%8A%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JS%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h2><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><h4 id="什么是作用域"><a href="#什么是作用域" class="headerlink" title="什么是作用域"></a>什么是作用域</h4><p>作用域是一套规则， 用于确定在何处以及如何查找变量（标识符）。 如果查找的目的是对变量进行赋值， 那么就会使用 LHS 查询； 如果目的是获取变量的值， 就会使用 RHS 查询。赋值操作符会导致 LHS 查询。 ＝ 操作符或调用函数时传入参数的操作都会导致关联作用域的赋值操作。</p><h4 id="js引擎做了什么"><a href="#js引擎做了什么" class="headerlink" title="js引擎做了什么"></a>js引擎做了什么</h4><p>JavaScript 引擎首先会在代码执行前对其进行编译， 在这个过程中， 像 var a = 2 这样的声明会被分解成两个独立的步骤：</p><ul><li><p>首先， var a 在其作用域中声明新变量。这会在最开始的阶段， 也就是代码执行前进行。</p></li><li><p>接下来， a = 2 会查询（LHS 查询） 变量 a 并对其进行赋值。LHS 和 RHS 查询都会在当前执行作用域中开始， 如果有需要（也就是说它们没有找到所需的标识符）， 就会向上级作用域继续查找目标标识符， 这样每次上升一级作用域（一层楼）， 最后抵达全局作用域（顶层）， 无论找到或没找到都将停止。</p></li><li><p>不成功的 RHS 引用会导致抛出 ReferenceError 异常。 不成功的 LHS 引用会导致自动隐式地创建一个全局变量（非严格模式下）， 该变量使用 LHS 引用的目标作为标识符， 或者抛出 ReferenceError 异常（严格模式下）。</p></li></ul><h3 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h3><h4 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h4><p>JavaScript 中有两个机制可以“欺骗” 词法作用域： eval(..) 和 with。 </p><ul><li>Eval(…) 可对一段包含一个或多个声明的“代码” 字符串进行演算， 并借此来修改已经存在的词法作用域（在运行时）。</li><li>with 本质上是通过将一个对象的引用当作作用域来处理， 将对象的属性当作作用域中的标识符来处理， 从而创建了一个新的词法作用域（同样是在运行时）。</li></ul><p>这两个机制的副作用是引擎无法在编译时对作用域查找进行优化， 因为引擎只能谨慎地认为这样的优化是无效的。 使用这其中任何一个机制都将导致代码运行变慢。 不要使用它们。</p><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><h3 id="隐藏作用域"><a href="#隐藏作用域" class="headerlink" title="隐藏作用域"></a>隐藏作用域</h3><h3 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h3><h4 id="TypeError-还是-ReferenceError"><a href="#TypeError-还是-ReferenceError" class="headerlink" title="TypeError 还是 ReferenceError"></a>TypeError 还是 ReferenceError</h4><p>写出如下代码输入结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( a ); </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==== 分割线 ====</p><p>这段代码实际上会被理解为下面的形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log( a ); <span class="comment">// undefined</span></span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><p>可以看到， 函数声明会被提升， 但是函数表达式却不会被提升。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foo(); <span class="comment">// 不是 ReferenceError, 而是 TypeError!</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这段程序中的变量标识符 foo() 被提升并分配给所在作用域（在这里是全局作用域）， 因此foo() 不会导致 ReferenceError。 但是 foo 此时并没有赋值（如果它是一个函数声明而不是函数表达式， 那么就会赋值）。 foo() 由于对 undefined 值进行函数调用而导致非法操作，因此抛出 TypeError 异常。</p><p>名称标识符在赋值之前也无法在所在作用域中使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">foo(); <span class="comment">// TypeError</span></span><br><span class="line">bar(); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="函数优先"><a href="#函数优先" class="headerlink" title="函数优先"></a>函数优先</h3><p>考虑以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">foo(); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">1</span> );</span><br><span class="line">&#125; f</span><br><span class="line">oo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">2</span> );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>会输出 1 而不是 2 ！ 这个代码片段会被引擎理解为如下形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">1</span> );</span><br><span class="line">&#125; f</span><br><span class="line">oo(); <span class="comment">// 1</span></span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">2</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>var foo 尽管出现在 function foo()… 的声明之前， 但它是重复的声明（因此被忽略了）， 因为函数声明会被提升到普通变量之前。<br>尽管重复的 var 声明会被忽略掉， 但出现在后面的函数声明还是可以覆盖前面的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">foo(); <span class="comment">// 3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">2</span> );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">3</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作用域闭包"><a href="#作用域闭包" class="headerlink" title="作用域闭包"></a>作用域闭包</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>当函数可以记住并访问所在的词法作用域时， 就产生了闭包， 即使函数是在当前词法作用域之外执行。</p><h4 id="闭包有哪些细节？"><a href="#闭包有哪些细节？" class="headerlink" title="闭包有哪些细节？"></a>闭包有哪些细节？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( a );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> baz = foo();</span><br><span class="line">baz(); <span class="comment">// 2 —— 这就是闭包的效果。</span></span><br></pre></td></tr></table></figure><p>函数 bar() 的词法作用域能够访问 foo() 的内部作用域。 然后将 bar() 函数本身当作一个值类型进行传递。 在这个例子中，  bar 所引用的函数对象本身当作返回值。<br>在 foo() 执行后， 其返回值（也就是内部的 bar() 函数） 赋值给变量 baz 并调用 baz()， 实际上只是通过不同的标识符引用调用了内部的函数 bar()。bar() 显然可以被正常执行。 但是在这个例子中， 它在自己定义的词法作用域以外的地方执行。</p><p>在 foo() 执行后， 通常会期待 foo() 的整个内部作用域都被销毁， 因为引擎有垃圾回收器用来释放不再使用的内存空间。 而闭包的“神奇” 之处正是可以阻止这件事情的发生。 事实上内部作用域依然存在， 没有被回收。 谁在使用这个内部作用域？ 原来是 bar() 本身在使用。<br>拜 bar() 所声明的位置所赐， 它拥有涵盖 foo() 内部作用域的闭包， 使得该作用域能够一直存活， 以供 bar() 在之后任何时间进行引用。<br>bar() 依然持有对该作用域的引用， 而这个引用就叫作闭包。</p><h4 id="闭包的本质"><a href="#闭包的本质" class="headerlink" title="闭包的本质"></a>闭包的本质</h4><p>本质上，无论何时何地， 如果将函数（访问它们各自的词法作用域） 当作第一级的值类型并到处传递， 你就会看到闭包在这些函数中的应用。 在定时器、 事件监听器、Ajax 请求、 跨窗口通信、 Web Workers 或者任何其他的异步（或者同步） 任务中， 只要使用了回调函数， 实际上就是在使用闭包 和 对象原型。</p><h4 id="我是闭包吗？"><a href="#我是闭包吗？" class="headerlink" title="我是闭包吗？"></a>我是闭包吗？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">IIFE</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( a );</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>=== 分割线===</p><p>不是闭包。 为什么？</p><p> 因为函数（示例代码中的 IIFE） 并不是在它本身的词法作用域以外执行的。 它在定义时所在的作用域中执行（而外部作用域， 也就是全局作用域也持有 a）。 a 是通过普通的词法作用域查找而非闭包被发现的</p><h3 id="循环和闭包"><a href="#循环和闭包" class="headerlink" title="循环和闭包"></a>循环和闭包</h3><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="主要类型（6-种）"><a href="#主要类型（6-种）" class="headerlink" title="主要类型（6 种）"></a>主要类型（6 种）</h3><ul><li>string</li><li>number</li><li>boolean</li><li>null</li><li>undifinded</li><li>object</li></ul><p>函数是对象的一个子类型（可调用的对象）</p><h3 id="内置对象（对象子类型-）"><a href="#内置对象（对象子类型-）" class="headerlink" title="内置对象（对象子类型 ）"></a>内置对象（对象子类型 ）</h3><ul><li>String</li><li>Number</li><li>Boolean</li><li>Object</li><li>Function</li><li>Array</li><li>Date</li><li>RegExp</li><li>Error</li></ul><h3 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h3><p>在对象中，属性名永远是字符串！！！如果使用string以外其他值作为属性名，它首先会被转换成字符串，注意和数组中数字用法区分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">myObject[<span class="literal">true</span>] = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line">myObject[<span class="number">3</span>] = <span class="string">&quot;bar&quot;</span>;</span><br><span class="line">myObject[myObject] = <span class="string">&quot;baz&quot;</span>;</span><br><span class="line"></span><br><span class="line">myObject[<span class="string">&quot;true&quot;</span>];</span><br><span class="line">myObject[<span class="string">&quot;3&quot;</span>];</span><br><span class="line">myObject[<span class="string">&quot;[object object]&quot;</span>]</span><br></pre></td></tr></table></figure><p>即便在对象的文字声明中，声明一个函数表达式，它也只是对于相同函数的多个引用。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="数组下标可以不是数值吗？"><a href="#数组下标可以不是数值吗？" class="headerlink" title="数组下标可以不是数值吗？"></a>数组下标可以不是数值吗？</h4><p>数组期望的是数值下标，我们仍然可以给数组添加属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = [<span class="string">&quot;foo&quot;</span>， <span class="number">42</span>， <span class="string">&quot;bar&quot;</span>]</span><br><span class="line">myArray.baz = <span class="string">&quot;baz&quot;</span>;</span><br><span class="line">myArray.length; <span class="comment">// 3  </span></span><br><span class="line">myArray.baz; <span class="comment">// &quot;baz&quot;</span></span><br></pre></td></tr></table></figure><p>可以看到虽然添加了命名属性，数组长度并未发生变化，所以完全可以把数组当做键值对使用，当然，这并不是一个好主意。如果属性名看起来是一个数字，那么它会变成数组下标，会修改数组的内容而不是添加一个属性。</p><h3 id="复制对象"><a href="#复制对象" class="headerlink" title="复制对象"></a>复制对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">anotherFunction</span>(<span class="params"></span>) </span>&#123; <span class="comment">/*..*/</span> &#125;</span><br><span class="line"><span class="keyword">var</span> anotherObject = &#123;</span><br><span class="line">c: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> anotherArray = [];</span><br><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">a: <span class="number">2</span>,</span><br><span class="line">b: anotherObject, <span class="comment">// 引用， 不是复本！</span></span><br><span class="line">c: anotherArray, <span class="comment">// 另一个引用！</span></span><br><span class="line">d: anotherFunction</span><br><span class="line">&#125;</span><br><span class="line">anotherArray.push( anotherObject, myObject );</span><br></pre></td></tr></table></figure><p>如何准确地表示 myObject 的复制呢？<br>首先， 我们应该判断它是浅复制还是深复制。 对于浅拷贝来说， 复制出的新对象中 a 的值会复制旧对象中 a 的值， 也就是 2， 但是新对象中 b、 c、 d 三个属性其实只是三个引用， 它们和旧对象中 b、 c、 d 引用的对象是一样的。 对于深复制来说， 除了复制 myObject以外还会复制 anotherObject 和 anotherArray。 这时问题就来了， anotherArray 引用了 anotherObject 和myObject， 所以又需要复制 myObject， 这样就会由于循环引用导致死循环。</p><p>相比深复制， 浅复制非常易懂并且问题要少得多， 所以 ES6 定义了 Object.assign(..) 方法来实现浅复制。 Object.assign(..) 方法的第一个参数是目标对象， 之后还可以跟一个或多个源对象。 它会遍历一个或多个源对象的所有可枚举（enumerable， 参见下面的代码）的自有键（owned key， 很快会介绍） 并把它们复制（使用 = 操作符赋值） 到目标对象， 最后返回目标对象， 就像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newObj = <span class="built_in">Object</span>.assign( &#123;&#125;, myObject );</span><br><span class="line">newObj.a; <span class="comment">// 2</span></span><br><span class="line">newObj.b === anotherObject; <span class="comment">// true</span></span><br><span class="line">newObj.c === anotherArray; <span class="comment">// true</span></span><br><span class="line">newObj.d === anotherFunction; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="Get"><a href="#Get" class="headerlink" title="[[Get]]"></a>[[Get]]</h3><h4 id="属性访问过程都做了什么？"><a href="#属性访问过程都做了什么？" class="headerlink" title="属性访问过程都做了什么？"></a>属性访问过程都做了什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">a: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line">myObject.a; <span class="comment">// 2</span></span><br><span class="line">myObject.b; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>myObject.a 是一次属性访问，在语言规范中， myObject.a 在 myObject 上实际上是实现了 [[Get]] 操作（ 有点像函数调用：[[Get]]）。 对象默认的内置 [[Get]] 操作首先在对象中查找是否有名称相同的属性，如果找到就会返回这个属性的值。<br>然而， 如果没有找到名称相同的属性， 按照 [[Get]] 算法的定义会遍历可能存在的 [[Prototype]] 链。如果无论如何都没有找到名称相同的属性， 那 [[Get]] 操作会返回值 undefined：</p><p>从返回值的角度来说， 上面两个引用没有区别——它们都返回了 undefined。 然而， 尽管乍看之下没什么区别， 实际上底层的 [[Get]] 操作对 myObject.b 进行了更复杂的处理。由于仅根据返回值无法判断出到底变量的值为 undefined 还是变量不存在， 所以 [[Get]]<br>操作返回了 undefined。</p><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>for..in 循环可以用来遍历对象的可枚举属性列表（包括 [[Prototype]] 链）。 但是如何遍历属性的值呢？对于数值索引的数组来说， 可以使用标准的 for 循环来遍历值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myArray.length; i++) &#123;</span><br><span class="line"><span class="built_in">console</span>.log( myArray[i] );</span><br><span class="line">&#125; /</span><br><span class="line">/ <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>这实际上并不是在遍历值， 而是遍历下标来指向值， 如 myArray[i]。<br>ES5 中增加了一些数组的辅助迭代器， 包括 forEach(..)、 every(..) 和 some(..)。 每种辅助迭代器都可以接受一个回调函数并把它应用到数组的每个元素上， 唯一的区别就是它们对于回调函数返回值的处理方式不同。<br>forEach(..) 会遍历数组中的所有值并忽略回调函数的返回值。 every(..) 会一直运行直到回调函数返回 false（或者“假” 值）， some(..) 会一直运行直到回调函数返回 true（或者“真” 值）。every(..) 和 some(..) 中特殊的返回值和普通 for 循环中的 break 语句类似， 它们会提前终止遍历。</p><p>注意：遍历数组下标时采用的是数字顺序（for 循环或者其他迭代器）， 但是遍历对象属性时的顺序是不确定的， 在不同的 JavaScript 引擎中可能不一样。 因此，在不同的环境中需要保证一致性时， 一定不要相信任何观察到的顺序， 它们是不可靠的。</p><p>遍历值可用如下方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> v <span class="keyword">of</span> myArray) &#123;</span><br><span class="line"><span class="built_in">console</span>.log( v );</span><br><span class="line">&#125; /</span><br><span class="line">/ <span class="number">1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> FontEnd </category>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标检测相关论文汇总</title>
      <link href="/2020/12/07/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E6%B1%87%E6%80%BB/"/>
      <url>/2020/12/07/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="Enabling-Deep-Re-sidual-Networks-for-Weakly-Supervised-Object-Detection"><a href="#Enabling-Deep-Re-sidual-Networks-for-Weakly-Supervised-Object-Detection" class="headerlink" title="Enabling Deep Re sidual Networks for Weakly Supervised Object Detection"></a>Enabling Deep Re sidual Networks for Weakly Supervised Object Detection</h3><p>作者 | Yunhang Shen, Rongrong Ji , Yan Wang, Zhiwei Chen, Feng Zheng ,Feiyue Huang , Yunsheng Wu</p><p>单位 | 厦门大学；Pinterest；南科大；腾讯优图（上海）</p><p><strong>论文地址</strong>： <a href="chrome-extension://ikhdkkncnoglghljlkmcimlnlhkeamad/pdf-viewer/web/viewer.html?file=https%3A%2F%2Farxiv.org%2Fpdf%2F2008.09694.pdf">2008.09694.pdf</a></p><p><strong>GIthub： <a href="https://github.com/shenyunhang/DRN-WSOD">https://github.com/shenyunhang/DRN-WSOD</a></strong></p><h3 id="Cheaper-Pre-training-Lunch-An-Efficient-Paradigm-for-Object-Detection"><a href="#Cheaper-Pre-training-Lunch-An-Efficient-Paradigm-for-Object-Detection" class="headerlink" title="Cheaper Pre-training Lunch: An Efficient Paradigm for Object Detection"></a>Cheaper Pre-training Lunch: An Efficient Paradigm for Object Detection</h3><p>作者 | Dongzhan Zhou, Xinchi Zhou, Hongwen Zhang, Shuai Yi, Wanli Ouyang</p><p>单位 | 悉尼大学，商汤CV研究小组；中科院&amp;国科大；商汤</p><p>论文地址 ：<a href="https://arxiv.org/pdf/2004.12178.pdf">https://arxiv.org/pdf/2004.12178.pdf</a></p><p>GitHub | 暂无</p><p>提出了一种通用而有效的训练前范式，Montage预训练用于目标检测。Montage预训练只需要目标检测数据集，而与广泛采用的ImageNet相比，该http URL构建了这样一个高效的范式，通过仔细地从原始图像中提取有用的样本，以Montage的方式组装样本作为输入，以及使用ERF自适应密集分类策略进行模型预训练来减少潜在的冗余。这些设计不仅包括一种新的输入模式来提高空间利用率，而且还包括一种新的学习目标，以扩大预先训练模型的有效接受领域。</p>]]></content>
      
      
      <categories>
          
          <category> Papers </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础知识汇总</title>
      <link href="/2020/10/23/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/"/>
      <url>/2020/10/23/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><h4 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h4><ul><li>pm：绝对单位，在任何情况下页面文本所计算出来的值都是一样的。</li><li>em：1em等于父级元素上设置的字体大小</li><li>rem：1rem等于根元素字体大小 font-size</li></ul><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><h4 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h4><ul><li>link 蓝色</li><li>visited 紫色</li><li>hover 小手</li><li>focus 轮廓</li><li>Active 红色</li></ul><h3 id="弹性盒子"><a href="#弹性盒子" class="headerlink" title="弹性盒子"></a>弹性盒子</h3><h4 id="水平垂直对齐"><a href="#水平垂直对齐" class="headerlink" title="水平垂直对齐"></a>水平垂直对齐</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浮动布局"><a href="#浮动布局" class="headerlink" title="浮动布局"></a>浮动布局</h3><h4 id="两列布局"><a href="#两列布局" class="headerlink" title="两列布局"></a>两列布局</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line"><span class="attribute">max-width</span>: <span class="number">900px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(1)</span> &#123;</span><br><span class="line">    width: 48%;f</span><br><span class="line">    <span class="selector-tag">float</span>: <span class="selector-tag">left</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(2)</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">48%</span>;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三列布局"><a href="#三列布局" class="headerlink" title="三列布局"></a>三列布局</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>两边定宽中间自适应<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        *&#123;<span class="attribute">margin</span>: <span class="number">0</span>;<span class="attribute">padding</span>: <span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#e51400</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.center</span>&#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#ff0097</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            float: right;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#4eb3b9</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>左侧定宽<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span> 右侧定宽<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>中间自适应<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><h4 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br></pre></td></tr></table></figure><h4 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br></pre></td></tr></table></figure><p>绝对定位固定元素是相对于 html 元素或其最近的定位祖先</p><h4 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">fixed</span>;</span><br></pre></td></tr></table></figure><p>固定定位固定元素则是相对于浏览器视口本身。 这意味着您可以创建固定的有用的UI项目，如持久导航菜单</p><h4 id="粘贴定位"><a href="#粘贴定位" class="headerlink" title="粘贴定位"></a>粘贴定位</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">sticky</span>;</span><br></pre></td></tr></table></figure><h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><p><strong>注意</strong>:检查段落发现， CSS样式的JavaSript属性版本以小驼峰式命名法书写，而CSS版本带连接符号（<code>backgroundColor</code> 对 <code>background-color</code>）。确保你不会混淆，否则就不能工作。</p><h3 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h3><h4 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#wrap&#123;</span><br><span class="line"></span><br><span class="line">  width: 500px;</span><br><span class="line">  height: 500px;</span><br><span class="line">  position: relative;</span><br><span class="line">  background: grey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#wrap .box&#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  top: 0;</span><br><span class="line">  bottom:0;</span><br><span class="line">  left: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  position: absolute;</span><br><span class="line">  margin: auto;</span><br><span class="line">  background: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="position"><a href="#position" class="headerlink" title="position"></a>position</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">background</span>: grey;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">background</span>: grey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.box</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*新版本*/</span></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">background</span>: grey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*老版本*/</span></span><br><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">-webkit-box-pack</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-box-align</span>: center;</span><br><span class="line">  <span class="attribute">background</span>: grey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>line-height = height</p><h3 id="纯css创建三角形"><a href="#纯css创建三角形" class="headerlink" title="纯css创建三角形"></a>纯css创建三角形</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">100px</span> solid;</span><br><span class="line">  <span class="attribute">border-top-color</span>: red;</span><br><span class="line">  <span class="attribute">border-right-color</span>: transparent;</span><br><span class="line">  <span class="attribute">border-bottom-color</span>: transparent;</span><br><span class="line">  <span class="attribute">border-left-color</span>: transparent;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="数据类型-8种"><a href="#数据类型-8种" class="headerlink" title="数据类型(8种)"></a>数据类型(8种)</h3><h4 id="7种原始类型"><a href="#7种原始类型" class="headerlink" title="7种原始类型"></a>7种原始类型</h4><ul><li>boolean</li><li>null</li><li>undifined</li><li>number</li><li>bigint</li><li>string</li><li>symbol</li></ul><h4 id="object"><a href="#object" class="headerlink" title="object"></a>object</h4><h2 id="笔试基础"><a href="#笔试基础" class="headerlink" title="笔试基础"></a>笔试基础</h2><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h4 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h4><p>前序遍历：根 - 左 - 右</p><p>中序遍历：左 - 根 - 右</p><p>后序遍历：根 - 左 - 右</p>]]></content>
      
      
      <categories>
          
          <category> FontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 搭建博客</title>
      <link href="/2020/10/02/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/10/02/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-安装-Hexo"><a href="#1-1-安装-Hexo" class="headerlink" title="1.1 安装 Hexo"></a>1.1 安装 Hexo</h2><p>首先要安装 node.js， git </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install git nginx -y</span><br></pre></td></tr></table></figure><p>安装完成后，使用 npm 安装 Hexo:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli hexo-server -g</span><br></pre></td></tr></table></figure><p>初始化指定文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure><p>启动本地服务器查看样例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><h4 id="2-1-配置-Nginx-托管文件目录"><a href="#2-1-配置-Nginx-托管文件目录" class="headerlink" title="2.1 配置 Nginx 托管文件目录"></a>2.1 配置 Nginx 托管文件目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /var/repo/</span><br><span class="line">sudo chown -R $USER:$USER /var/repo/</span><br><span class="line">sudo chmod -R 755 /var/repo/</span><br></pre></td></tr></table></figure><p>然后，执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/repo/</span><br><span class="line">git init --bare hexo_static.git</span><br></pre></td></tr></table></figure><p>接下来，创建 <code>/var/www/hexo</code> 目录，用于 Nginx 托管。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /var/www/hexo</span><br></pre></td></tr></table></figure><p>和上一步类似，这里也需要修改目录的所有权和权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R $USER:$USER /var/www/hexo</span><br><span class="line">sudo chmod -R 755 /var/www/hexo</span><br></pre></td></tr></table></figure><p>然后，修改 Nginx 的 <code>default</code> 设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p>重启 Nginx 服务，使得改动生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure><h3 id="2-2-创建-Git-钩子"><a href="#2-2-创建-Git-钩子" class="headerlink" title="2.2 创建 Git 钩子"></a>2.2 创建 Git 钩子</h3><p>接下来，在服务器上的裸仓库 hexo_static 创建一个钩子，在满足特定条件时将静态 HTML 文件传送到 Web 服务器的目录下，即 /var/www/hexo。</p><p>在自动生成的 hooks 目录下创建一个新的钩子文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/repo/hexo_static.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>在该文件中添加两行代码，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/var/repo/hexo_static.git checkout -f</span><br></pre></td></tr></table></figure><p>保存并退出文件，并让该文件变为可执行文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /<span class="keyword">var</span>/repo/hexo_static.git/hooks/post-receive</span><br></pre></td></tr></table></figure><h3 id="2-3-通过-Git-部署"><a href="#2-3-通过-Git-部署" class="headerlink" title="2.3 通过 Git 部署"></a>2.3 通过 Git 部署</h3><p>继续编辑 <code>_config.yml</code> 文件，找到 <strong>Deployment</strong> 部分，按照如下情况修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: ubuntu@CVM 云服务器的IP地址:/var/repo/hexo_static</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>需要安装一个 Hexo 包，负责将博客所需的静态内容发送到设置好的 Git 仓库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装好后可以上传服务器测试部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Guide </category>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 配置 LEMP 环境</title>
      <link href="/2019/08/03/Linux-%E9%85%8D%E7%BD%AELEMP%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/08/03/Linux-%E9%85%8D%E7%BD%AELEMP%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><h4 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install nginx</span><br><span class="line">sudo ufw allow &#39;Nginx HTTP&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>sudo ufw status</p><p>浏览器输入ip地址或域名</p><h4 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></figure><p>mysql -u root -p</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure><p>Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 1</p><p>y</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT user,authentication_string,plugin,host FROM mysql.user;</span><br></pre></td></tr></table></figure><p>此时root用户通过 auth_socket插件进行身份验证，以下将root用户改成通过密码进行身份验证</p><p>password改成自己刚改密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;password&#39;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT user,authentication_string,plugin,host FROM mysql.user;</span><br></pre></td></tr></table></figure><p>有以上输出，则可以退出mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p><strong>Note</strong>  : 此时 sudo mysql 无法继续访问mysql，我们可以通过以下命令登入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h5 id="ERROR-1819-HY000"><a href="#ERROR-1819-HY000" class="headerlink" title="ERROR 1819(HY000)"></a>ERROR 1819(HY000)</h5><p>如果出现 ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</p><p>则</p><p><code>sudo mysql_secure_installation</code></p><p>改一个强度高的密码</p><p>密码强度最好一百以上</p><p>Estimated strength of the password: 100 </p><p>q继续上述命令验证</p><h4 id="安装PHP并配置Nginx组件"><a href="#安装PHP并配置Nginx组件" class="headerlink" title="安装PHP并配置Nginx组件"></a>安装PHP并配置Nginx组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository universe </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install php-fpm php-mysql</span><br></pre></td></tr></table></figure><p>到此LEMP必要的组件已经安装完毕，帮极啦！不过仍然要进行一些配置更改，以使Nginx使用PHP处理器来处理动态内容。</p><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><h4 id="新建服务器配置文件"><a href="#新建服务器配置文件" class="headerlink" title="新建服务器配置文件"></a>新建服务器配置文件</h4><p>新建的服务器配置文件，Example.com 即是，可自主命名。（不记得跟目录查一下 ps  -ef | grep nginx）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;man.com</span><br></pre></td></tr></table></figure><p>内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        root /var/html;</span><br><span class="line">        index index.php index.html index.htm index.nginx-debian.html;</span><br><span class="line">        server_name man.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">                include snippets/fastcgi-php.conf;</span><br><span class="line">                fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /\.ht &#123;</span><br><span class="line">                deny all;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="在-sites-enabled-下创建-symbol-link-链接-sites-available-下的配置文件启用代理配置"><a href="#在-sites-enabled-下创建-symbol-link-链接-sites-available-下的配置文件启用代理配置" class="headerlink" title="在 sites-enabled 下创建 symbol link 链接 sites-available 下的配置文件启用代理配置"></a>在 <strong>sites-enabled</strong> 下创建 symbol link 链接 <strong>sites-available</strong> 下的配置文件启用代理配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /etc/nginx/sites-available/man.com /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure><h4 id="取消默认启动指向"><a href="#取消默认启动指向" class="headerlink" title="取消默认启动指向"></a>取消默认启动指向</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo unlink /etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure><h4 id="检查配置文件是否错误"><a href="#检查配置文件是否错误" class="headerlink" title="检查配置文件是否错误"></a>检查配置文件是否错误</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure><h4 id="重启-Nginx"><a href="#重启-Nginx" class="headerlink" title="重启 Nginx"></a>重启 Nginx</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl reload nginx</span><br></pre></td></tr></table></figure><h3 id="建一个PHP文件测试配置"><a href="#建一个PHP文件测试配置" class="headerlink" title="建一个PHP文件测试配置"></a>建一个PHP文件测试配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano &#x2F;var&#x2F;html&#x2F;info.php</span><br></pre></td></tr></table></figure><p>配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;your_server_domain_or_IP&#x2F;info.php</span><br></pre></td></tr></table></figure><p>wow！配置成功！</p><p>最后，我们最好删除测试文件，因为它实际上可以为未经授权的用户提供有关您的配置的一些提示，这些提示可能有助于他人尝试闯入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm &#x2F;var&#x2F;html&#x2F;info.php</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Guide </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH 免密登录远程服务器</title>
      <link href="/2019/08/03/SSH%20%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
      <url>/2019/08/03/SSH%20%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>本地通过 SSH 访问远程系统时，登录链接需要频繁手动输入密码，不仅枯燥无趣且不安全。因此，可通过密钥认证访问远程系统。</p><h3 id="本地客户端"><a href="#本地客户端" class="headerlink" title="本地客户端"></a>本地客户端</h3><h4 id="生成密钥，本地普通用户下执行"><a href="#生成密钥，本地普通用户下执行" class="headerlink" title="生成密钥，本地普通用户下执行"></a>生成密钥，本地普通用户下执行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>可输入密码或按两次回车不设置 SSH 访问密码, 同时可看到密钥保存的路径。</p><p>若想重新设置密码，执行如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -p -f ~/username/zhangsan/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>可以查看  ~/username/zhangsan/.ssh 下已经生成了 公钥 和 私钥 文件。</p><h3 id="远程服务器"><a href="#远程服务器" class="headerlink" title="远程服务器"></a>远程服务器</h3><h4 id="SSH-公钥拷到远程服务器-authorized-keys"><a href="#SSH-公钥拷到远程服务器-authorized-keys" class="headerlink" title="SSH 公钥拷到远程服务器 authorized_keys"></a>SSH 公钥拷到远程服务器 authorized_keys</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id sk@192.168.225.22</span><br></pre></td></tr></table></figure><p>执行上述命令会将本地 <code>~/username/zhangsan/.ssh/id_rsa.pub</code> 文件中的内容拷到远程系统 <code>~/.ssh/authorized_keys</code> 中。</p><p>或者可以使用文件传输工具，例如 <a href="https://filezilla-project.org/download.php?platform=osx">filezilla</a> 将 id_rsa.pub 传到远程服务器上，登录远程服务器，将 id_rsa.pub 文件内容粘到 ~/.ssh/authorized_keys。</p><h4 id="禁用密码验证"><a href="#禁用密码验证" class="headerlink" title="禁用密码验证"></a>禁用密码验证</h4><p>打开 ssh_config 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/ssh/ssh_config</span><br></pre></td></tr></table></figure><p>去掉如下一行注释然后将值设为 <code>no</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PasswordAuthentication no</span><br></pre></td></tr></table></figure><p>重启 ssh 服务</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl restart ssh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Guide </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSL 证书配置</title>
      <link href="/2019/08/03/SSL%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/08/03/SSL%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="需要准备"><a href="#需要准备" class="headerlink" title="需要准备"></a>需要准备</h3><p>   腾讯云证书，Nginx 服务，例： 1inc.cn</p><h3 id="证书申请"><a href="#证书申请" class="headerlink" title="证书申请"></a>证书申请</h3><p> <a href="https://console.cloud.tencent.com/ssl">SSL 证书管理控制台</a> 中 申请免费证书，选择 DNS验证，在 域名解析 中添加相应记录，再回到验证页面进行验证即可成功签发证书。</p><h3 id="证书安装"><a href="#证书安装" class="headerlink" title="证书安装"></a>证书安装</h3><h4 id="1）在-SSL-证书管理控制台-中下载并解压缩-www-domain-com-证书文件包到本地目录。"><a href="#1）在-SSL-证书管理控制台-中下载并解压缩-www-domain-com-证书文件包到本地目录。" class="headerlink" title="1）在 SSL 证书管理控制台 中下载并解压缩 www.domain.com 证书文件包到本地目录。"></a>1）在 <a href="https://console.cloud.tencent.com/ssl">SSL 证书管理控制台</a> 中下载并解压缩 <code>www.domain.com</code> 证书文件包到本地目录。</h4><p>解压缩后，可获得相关类型的证书文件。其中包含 Nginx 文件夹和 CSR 文件：</p><ul><li><strong>文件夹名称</strong>：Nginx</li><li>文件夹内容<ul><li><code>1_www.domain.com_bundle.crt</code> 证书文件</li><li><code>2_www.domain.com.key</code> 私钥文件</li></ul></li></ul><h4 id="2）使用文件传输工具，例如-filezilla-将上面两个文件传到登录的服务器上，移动到服务器-Nginx-目录下"><a href="#2）使用文件传输工具，例如-filezilla-将上面两个文件传到登录的服务器上，移动到服务器-Nginx-目录下" class="headerlink" title="2）使用文件传输工具，例如 filezilla 将上面两个文件传到登录的服务器上，移动到服务器 Nginx 目录下"></a>2）使用文件传输工具，例如 <a href="https://filezilla-project.org/download.php?platform=osx">filezilla</a> 将上面两个文件传到登录的服务器上，移动到服务器 Nginx 目录下</h4><h4 id="3）在-etc-nginx-sites-available-目录下新建一个配置文件"><a href="#3）在-etc-nginx-sites-available-目录下新建一个配置文件" class="headerlink" title="3）在 /etc/nginx/sites-available 目录下新建一个配置文件"></a>3）在 /etc/nginx/sites-available 目录下新建一个配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/nginx/sites-available/1inc.cn</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 443;</span><br><span class="line">        ssl on;</span><br><span class="line">        root /var/www/html;</span><br><span class="line">        index index.php index.html index.htm index.nginx-debian.html;</span><br><span class="line">        server_name www.1inc.cn;</span><br><span class="line">        ssl_certificate 1_www.1inc.cn_bundle.crt;</span><br><span class="line">         ssl_certificate_key 2_www.1inc.cn.key; </span><br><span class="line">        location / &#123;</span><br><span class="line">                try_files $uri $uri/ =404;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">                include snippets/fastcgi-php.conf;</span><br><span class="line">                fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /\.ht &#123;</span><br><span class="line">                deny all;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为官方配置文件，可参照更改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     #SSL 访问端口号为 443</span><br><span class="line">     ssl on; </span><br><span class="line">     #填写绑定证书的域名</span><br><span class="line">     server_name www.1inc.cn; </span><br><span class="line">     #证书文件名称</span><br><span class="line">     ssl_certificate 1_www.1inc.cn_bundle.crt; </span><br><span class="line">     #私钥文件名称</span><br><span class="line">     ssl_certificate_key 2_www.1inc.cn.key; </span><br><span class="line">     ssl_session_timeout 5m;</span><br><span class="line">     #请按照以下协议配置</span><br><span class="line">     ssl_protocols TLSv1 TLSv1.1 TLSv1.2; </span><br><span class="line">     #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。</span><br><span class="line">     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; </span><br><span class="line">     ssl_prefer_server_ciphers on;</span><br><span class="line">     location / &#123;</span><br><span class="line">        #网站主页路径。此路径仅供参考，具体请您按照实际目录操作。</span><br><span class="line">         root /var/www/html/www.1inc.cn; </span><br><span class="line">         index  index.html index.htm;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="4）创建链接启动服务器"><a href="#4）创建链接启动服务器" class="headerlink" title="4）创建链接启动服务器"></a>4）创建链接启动服务器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /etc/nginx/sites-available/1inc.cn /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure><h4 id="5）-sites-enabled-目录中取消默认配置文件的链接："><a href="#5）-sites-enabled-目录中取消默认配置文件的链接：" class="headerlink" title="5）/ sites-enabled /目录中取消默认配置文件的链接："></a>5）/ sites-enabled /目录中取消默认配置文件的链接：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo unlink /etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure><h4 id="6）检查配置文件，直到不出错"><a href="#6）检查配置文件，直到不出错" class="headerlink" title="6）检查配置文件，直到不出错"></a>6）检查配置文件，直到不出错</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure><h4 id="7）最后，重新加载-Nginx"><a href="#7）最后，重新加载-Nginx" class="headerlink" title="7）最后，重新加载 Nginx"></a>7）最后，重新加载 Nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl reload nginx</span><br></pre></td></tr></table></figure><h4 id="8）测试"><a href="#8）测试" class="headerlink" title="8）测试"></a>8）测试</h4><p><a href="https://www.1inc.cn/">https://www.1inc.cn</a></p><h3 id="HTTP-自动跳转-HTTPS-的安全配置（可选）"><a href="#HTTP-自动跳转-HTTPS-的安全配置（可选）" class="headerlink" title="HTTP 自动跳转 HTTPS 的安全配置（可选）"></a>HTTP 自动跳转 HTTPS 的安全配置（可选）</h3><p>不妨试一下，上面配置若是以 HTTP 能成功登录吗？</p><p>下面将进一步配置服务器，使其自动将 HTTP 的请求重定向到 HTTPS</p><h4 id="1-进入网站配置文件，即上面的-1inc-cn，添加如下配置"><a href="#1-进入网站配置文件，即上面的-1inc-cn，添加如下配置" class="headerlink" title="1) 进入网站配置文件，即上面的 1inc.cn，添加如下配置"></a>1) 进入网站配置文件，即上面的 1inc.cn，添加如下配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name www.1inc.cn; </span><br><span class="line">return 301 https://$host$request_uri; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）测试"><a href="#2）测试" class="headerlink" title="2）测试"></a>2）测试</h4><p><a href="http://www.1inc.cn/">http://www.1inc.cn</a></p><p>以上，无论你从哪里来 1inc， 不迷路！</p>]]></content>
      
      
      <categories>
          
          <category> Guide </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PL/SQL 学习笔记</title>
      <link href="/2019/01/07/PLSQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/01/07/PLSQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h4 id="SQL99"><a href="#SQL99" class="headerlink" title="SQL99"></a>SQL99</h4><ul><li>（1）<strong>是操作所有关系型数据库的规则</strong></li><li>（2）是第四代语言</li><li>（3）<strong>是一种结构化查询语言</strong></li><li>（4）只需发出合法合理的命令，就有对应的结果显示</li></ul><h4 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h4><ul><li>（1）<strong>交互性强，非过程化</strong></li><li>（2）数据库操纵能力强，只需发送命令，无需关注如何实现</li><li>（3）多表操作时，自动导航简单</li><li>（4）容易调试，错误提示，直接了当</li><li>（5）<strong>SQL强调结果</strong></li></ul><h4 id="PLsql-是什么"><a href="#PLsql-是什么" class="headerlink" title="PLsql 是什么"></a>PLsql 是什么</h4><ul><li><p>是专用于Oracle服务器，在SQL基础之上，<strong>添加了一些过程化控制语句，叫PLSQL</strong></p></li><li><p>过程化包括有：类型定义，判断，循环，游标，异常或例外处理。。。</p></li><li><p><strong>PLSQL强调过程</strong></p></li></ul><h4 id="为什么要用PLSQL"><a href="#为什么要用PLSQL" class="headerlink" title="为什么要用PLSQL"></a>为什么要用PLSQL</h4><ul><li>因为SQL是第四代命令式语言，<strong>无法显示处理过程化的业务，所以得用一个过程化程序设计语言来弥补SQL的不足之处</strong>，</li><li>SQL和PLSQL不是替代关系，是弥补关系</li></ul><h3 id="PLsql-语法"><a href="#PLsql-语法" class="headerlink" title="PLsql 语法"></a>PLsql 语法</h3><p>declare和exception都是可以省略的，<code>begin和end;/</code>是不能省略的。</p><h4 id="显示PLsql执行结果"><a href="#显示PLsql执行结果" class="headerlink" title="显示PLsql执行结果"></a>显示PLsql执行结果</h4><p><code>set serveroutput on/off</code></p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><h5 id="number"><a href="#number" class="headerlink" title="number"></a>number</h5><h5 id="varchar2"><a href="#varchar2" class="headerlink" title="varchar2"></a>varchar2</h5><h4 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h4><h5 id="type"><a href="#type" class="headerlink" title="%type"></a>%type</h5><h5 id="rowtype"><a href="#rowtype" class="headerlink" title="%rowtype"></a>%rowtype</h5><h5 id="何时使用-type，何时使用-rowtype？"><a href="#何时使用-type，何时使用-rowtype？" class="headerlink" title="何时使用%type，何时使用%rowtype？"></a>何时使用%type，何时使用%rowtype？</h5><ul><li>当定义变量时，<strong>该变量的类型与表中某字段的类型相同时，可以使用%type</strong></li><li>当定义变量时，该变量与整个表结构完全相同时，可以使用%rowtype，此时通过变量名.字段名，可以取值变量中对应的值</li><li>项目中，常用%type</li></ul><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p><code>if 条件 then</code><br> <code>业务逻辑</code><br><code>elsif 条件 then</code><br> <code>业务逻辑</code><br><code>else</code><br> <code>业务逻辑</code><br><code>end if;</code></p><h4 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h4><h5 id="工资在-3000-或-5000"><a href="#工资在-3000-或-5000" class="headerlink" title="工资在 3000 或 5000"></a>工资在 3000 或 5000</h5><p><code>Sal in (3000,5000)</code></p><h5 id="01-判断工作日还是休息日"><a href="#01-判断工作日还是休息日" class="headerlink" title="01.判断工作日还是休息日"></a>01.判断工作日还是休息日</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">    pday varchar2(10);</span><br><span class="line">begin</span><br><span class="line">    select to_char(sysdate,&#39;day&#39;) into pday from dual;</span><br><span class="line">    dbms_output.put_line(&#39;今天&#39;||pday);</span><br><span class="line">    if pday in (&#39;星期六&#39;,&#39;星期日&#39;) then</span><br><span class="line">    dbms_output.put_line(&#39;休息日&#39;);</span><br><span class="line">    else</span><br><span class="line">    dbms_output.put_line(&#39;工作日&#39;);</span><br><span class="line">    end if;</span><br><span class="line">end;</span><br><span class="line">&#x2F;</span><br></pre></td></tr></table></figure><h5 id="02-工资-lt-1000，则在原来的基础上加200，如果-1000-lt-sal-lt-2000，加400，否则-加600"><a href="#02-工资-lt-1000，则在原来的基础上加200，如果-1000-lt-sal-lt-2000，加400，否则-加600" class="headerlink" title="02.工资&lt;1000，则在原来的基础上加200，如果 1000&lt;=sal&lt;=2000，加400，否则 加600"></a>02.工资&lt;1000，则在原来的基础上加200，如果 1000&lt;=sal&lt;=2000，加400，否则 加600</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">  psal number(10);</span><br><span class="line">  pempno number(10) :&#x3D; &amp;pempno;</span><br><span class="line">begin</span><br><span class="line">  select sal into psal from emp where empno &#x3D; pempno;</span><br><span class="line">    if psal &lt; 1000 then</span><br><span class="line">     sal:&#x3D;sal+200;</span><br><span class="line">    elsif psal &lt; 2000 then</span><br><span class="line">     psal:&#x3D;sal+400;</span><br><span class="line">    else</span><br><span class="line">       sal:&#x3D;sal+600;</span><br><span class="line">    end if;</span><br><span class="line">    dbms_output.put_line(&#39;调薪后工资&#39;||psal);</span><br><span class="line">end;</span><br><span class="line">&#x2F;</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="While-循环"><a href="#While-循环" class="headerlink" title="While 循环"></a>While 循环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WHILE  total  &lt;&#x3D; 25000  </span><br><span class="line">LOOP</span><br><span class="line">    total : &#x3D; total + salary;</span><br><span class="line">END  LOOP;</span><br></pre></td></tr></table></figure><h4 id="Loop循环"><a href="#Loop循环" class="headerlink" title="Loop循环"></a>Loop循环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Loop</span><br><span class="line">   exit [when 条件成立];</span><br><span class="line">   total:&#x3D;total+salary;</span><br><span class="line">end loop;</span><br></pre></td></tr></table></figure><h4 id="For循环"><a href="#For循环" class="headerlink" title="For循环"></a>For循环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in   1 . . 3  </span><br><span class="line">loop</span><br><span class="line">语句序列 ;</span><br><span class="line">end loop ; </span><br></pre></td></tr></table></figure><h4 id="小练手"><a href="#小练手" class="headerlink" title="小练手"></a>小练手</h4><h5 id="01-使用loop循环，向emp表中插入1000条记录"><a href="#01-使用loop循环，向emp表中插入1000条记录" class="headerlink" title="01.使用loop循环，向emp表中插入1000条记录"></a>01.使用loop循环，向emp表中插入1000条记录</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">    i number(4) :&#x3D; 1;</span><br><span class="line">begin    </span><br><span class="line">    loop</span><br><span class="line">    exit when i&gt;1000;</span><br><span class="line">        insert into emp(empno,ename) values(i,&#39;hello&#39;);</span><br><span class="line">        i :&#x3D; i + 1;</span><br><span class="line">    end loop;   </span><br><span class="line">end;</span><br><span class="line">&#x2F;</span><br></pre></td></tr></table></figure><p>#####02.使用loop循环显示1-10</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">    i number(2) :&#x3D; 1;</span><br><span class="line">begin</span><br><span class="line">    loop</span><br><span class="line">        --当i&gt;10时，退出循环</span><br><span class="line">        exit when i&gt;10;</span><br><span class="line">        --输出i的值</span><br><span class="line">        dbms_output.put_line(i);</span><br><span class="line">        --变量自加</span><br><span class="line">        i :&#x3D; i + 1;  </span><br><span class="line">    end loop;</span><br><span class="line">end;</span><br><span class="line">&#x2F;</span><br></pre></td></tr></table></figure><p>#####03.使用while循环显示1-10</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">    i number(2) :&#x3D; 1;</span><br><span class="line">begin</span><br><span class="line">    while i&lt;11 </span><br><span class="line">    loop</span><br><span class="line">        dbms_output.put_line(i);</span><br><span class="line">        i :&#x3D; i + 1;</span><br><span class="line">    end loop;</span><br><span class="line">end;</span><br><span class="line">&#x2F;</span><br></pre></td></tr></table></figure><h5 id="04-使用for循环显示20-30"><a href="#04-使用for循环显示20-30" class="headerlink" title="04.使用for循环显示20-30"></a>04.使用for循环显示20-30</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">    i number(2) :&#x3D; 20;</span><br><span class="line">begin</span><br><span class="line">    for i in 20 .. 30</span><br><span class="line">    loop</span><br><span class="line">        dbms_output.put_line(i);</span><br><span class="line">    end loop;</span><br><span class="line">end;</span><br><span class="line">&#x2F;</span><br></pre></td></tr></table></figure><h5 id="05-直角三角形"><a href="#05-直角三角形" class="headerlink" title="05.直角三角形"></a>05.直角三角形</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">    i number(2) :&#x3D; 1;</span><br><span class="line">begin</span><br><span class="line">  for i in 1 .. 5 loop</span><br><span class="line">    for j in 1 .. i loop</span><br><span class="line">      dbms_output.put(&#39;*&#39;);</span><br><span class="line">    end loop;</span><br><span class="line">    dbms_output.put_line(&#39;&#39;);</span><br><span class="line">  end loop;</span><br><span class="line">end;</span><br><span class="line">&#x2F;</span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="06-九九乘法表"><a href="#06-九九乘法表" class="headerlink" title="06. 九九乘法表"></a>06. 九九乘法表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">    i number(2):&#x3D; 1;</span><br><span class="line">    j number(2):&#x3D; 1;</span><br><span class="line">begin</span><br><span class="line">    for i in 1 .. 9</span><br><span class="line">    loop</span><br><span class="line">    for j in 1 .. 9</span><br><span class="line">    </span><br><span class="line">    loop        dbms_output.put(i||&#39;*&#39;j||&#39;&#x3D;&#39;||i * j || chr*(9)&#39;&#39;);</span><br><span class="line">    end loop;</span><br><span class="line">       dbms_output.put_line(&#39;&#39;);</span><br><span class="line">    end loop;</span><br><span class="line">end;</span><br><span class="line">&#x2F;</span><br></pre></td></tr></table></figure><h5 id="07-打印等腰三角形"><a href="#07-打印等腰三角形" class="headerlink" title="07. 打印等腰三角形"></a>07. 打印等腰三角形</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">    i number(2):&#x3D;1;</span><br><span class="line">    j number(2):&#x3D;1;</span><br><span class="line">    k number(2):&#x3D;1;</span><br><span class="line">begin</span><br><span class="line">  for i in 1..5 </span><br><span class="line">  loop</span><br><span class="line">    for j in 1 ..5-i </span><br><span class="line">    loop</span><br><span class="line">      dbms_output.put(&#39; &#39;);</span><br><span class="line">    end loop;</span><br><span class="line">    for k in 1 ..2*i-1 </span><br><span class="line">    loop</span><br><span class="line">      dbms_output.put(&#39;*&#39;);</span><br><span class="line">    end loop;</span><br><span class="line">    dbms_output.put_line(&#39;&#39;);</span><br><span class="line">  end loop;</span><br><span class="line">end;</span><br><span class="line">&#x2F;</span><br></pre></td></tr></table></figure><h5 id="08-打印菱形"><a href="#08-打印菱形" class="headerlink" title="08. 打印菱形"></a>08. 打印菱形</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">    i number(2):&#x3D;1;</span><br><span class="line">    j number(2):&#x3D;1;</span><br><span class="line">    k number(2):&#x3D;1;</span><br><span class="line">begin</span><br><span class="line">  --上部分</span><br><span class="line">  for i in 1..5 loop</span><br><span class="line">    for j in 1 ..5-i </span><br><span class="line">    loop</span><br><span class="line">      dbms_output.put(&#39; &#39;);</span><br><span class="line">    end loop;</span><br><span class="line">    for k in 1 ..2*i-1 </span><br><span class="line">    loop</span><br><span class="line">       dbms_output.put(&#39;*&#39;);</span><br><span class="line">    end loop;</span><br><span class="line">    dbms_output.put_line(&#39;&#39;);</span><br><span class="line">  end loop;</span><br><span class="line">  --下部分</span><br><span class="line">  for i in reverse 1..5 </span><br><span class="line">  loop</span><br><span class="line">    for j in 1 ..5-i</span><br><span class="line">    loop</span><br><span class="line">      dbms_output.put(&#39; &#39;);</span><br><span class="line">    end loop;</span><br><span class="line">    for k in 1 ..2*i-1</span><br><span class="line">    loop</span><br><span class="line">       dbms_output.put(&#39;*&#39;);</span><br><span class="line">    end loop;</span><br><span class="line">    dbms_output.put_line(&#39;&#39;);</span><br><span class="line">  end loop;</span><br><span class="line">end;</span><br><span class="line">&#x2F;</span><br></pre></td></tr></table></figure><h5 id="-1"><a href="#-1" class="headerlink" title=""></a></h5><h5 id="08-打印空心菱形（作业）"><a href="#08-打印空心菱形（作业）" class="headerlink" title="08. 打印空心菱形（作业）"></a>08. 打印空心菱形（作业）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">    i number(2):&#x3D;1;</span><br><span class="line">    j number(2):&#x3D;1;</span><br><span class="line">    k number(2):&#x3D;1;</span><br><span class="line">begin</span><br><span class="line">  --上部分</span><br><span class="line">  for i in 1..5 loop</span><br><span class="line">    for j in 1 ..5-i </span><br><span class="line">    loop</span><br><span class="line">      dbms_output.put(&#39; &#39;);</span><br><span class="line">    end loop;</span><br><span class="line">    for k in 1 ..2*i-1 </span><br><span class="line">    loop</span><br><span class="line">     if k in (0,i-1)</span><br><span class="line">     then </span><br><span class="line">       dbms_output.put(&#39;*&#39;);</span><br><span class="line">       end if;</span><br><span class="line">    end loop;</span><br><span class="line">    dbms_output.put_line(&#39;&#39;);</span><br><span class="line">  end loop;</span><br><span class="line">  --下部分</span><br><span class="line">  for i in reverse 1..5 </span><br><span class="line">  loop</span><br><span class="line">    for j in 1 ..5-i</span><br><span class="line">    loop</span><br><span class="line">      dbms_output.put(&#39; &#39;);</span><br><span class="line">    end loop;</span><br><span class="line">    for k in 1 ..2*i-1</span><br><span class="line">    loop</span><br><span class="line">       if k in (0,i-1)</span><br><span class="line">     then </span><br><span class="line">       dbms_output.put(&#39;*&#39;);</span><br><span class="line">       end if;</span><br><span class="line">    end loop;</span><br><span class="line">    dbms_output.put_line(&#39;&#39;);</span><br><span class="line">  end loop;</span><br><span class="line">end;</span><br><span class="line">&#x2F;</span><br></pre></td></tr></table></figure><h5 id="-2"><a href="#-2" class="headerlink" title=""></a></h5><h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CURSOR  光标名  [ (参数名  数据类型[,参数名 数据类型]...)]</span><br><span class="line">      IS  SELECT   语句</span><br></pre></td></tr></table></figure><h5 id="01-使用无参光标cursor，查询所有员工的姓名和工资【如果需要遍历多条记录时，使用光标cursor，无记录找到使用cemp-notfound】"><a href="#01-使用无参光标cursor，查询所有员工的姓名和工资【如果需要遍历多条记录时，使用光标cursor，无记录找到使用cemp-notfound】" class="headerlink" title="01.使用无参光标cursor，查询所有员工的姓名和工资【如果需要遍历多条记录时，使用光标cursor，无记录找到使用cemp%notfound】"></a>01.使用无参光标cursor，查询所有员工的姓名和工资【如果需要遍历多条记录时，使用光标cursor，无记录找到使用cemp%notfound】</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">    --定义游标</span><br><span class="line">    cursor cemp is select ename,sal from emp;</span><br><span class="line">    --定义变量</span><br><span class="line">    vename emp.ename%type;</span><br><span class="line">    vsal   emp.sal%type;</span><br><span class="line">begin</span><br><span class="line">    --打开游标，这时游标位于第一条记录之前</span><br><span class="line">    open cemp;</span><br><span class="line">    --循环</span><br><span class="line">    loop</span><br><span class="line">       --向下移动游标一次</span><br><span class="line">       fetch cemp into vename,vsal; </span><br><span class="line">       --退出循环,当游标下移一次后，找不到记录时，则退出循环</span><br><span class="line">       exit when cemp%notfound;</span><br><span class="line">       --输出结果</span><br><span class="line">       dbms_output.put_line(vename||&#39;--------&#39;||vsal);</span><br><span class="line">    end loop;</span><br><span class="line">    --关闭游标</span><br><span class="line">    close cemp;</span><br><span class="line">end;</span><br><span class="line">&#x2F;</span><br></pre></td></tr></table></figure><h5 id="02-使用带参光标cursor，查询10号部门的员工姓名和工资"><a href="#02-使用带参光标cursor，查询10号部门的员工姓名和工资" class="headerlink" title="02.使用带参光标cursor，查询10号部门的员工姓名和工资"></a>02.使用带参光标cursor，查询10号部门的员工姓名和工资</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">    cursor cemp(pdeptno emp.deptno%type) is select ename,sal from emp where deptno&#x3D;pdeptno;</span><br><span class="line">    pename emp.ename%type;</span><br><span class="line">    psal emp.sal%type; </span><br><span class="line">begin </span><br><span class="line">    open cemp(&amp;deptno);</span><br><span class="line">    loop</span><br><span class="line">        fetch cemp into pename,psal;     </span><br><span class="line">        exit when cemp%notfound;</span><br><span class="line">        dbms_output.put_line(pename||&#39;的薪水是&#39;||psal);</span><br><span class="line">    end loop;</span><br><span class="line">    close cemp;</span><br><span class="line">end;</span><br><span class="line">&#x2F;</span><br></pre></td></tr></table></figure><h5 id="03-使用无参光标cursor，真正给员工涨工资，ANALYST涨1000，MANAGER涨800，其它涨400，要求显示编号，姓名，职位，薪水"><a href="#03-使用无参光标cursor，真正给员工涨工资，ANALYST涨1000，MANAGER涨800，其它涨400，要求显示编号，姓名，职位，薪水" class="headerlink" title="03.使用无参光标cursor，真正给员工涨工资，ANALYST涨1000，MANAGER涨800，其它涨400，要求显示编号，姓名，职位，薪水"></a>03.使用无参光标cursor，真正给员工涨工资，ANALYST涨1000，MANAGER涨800，其它涨400，要求显示编号，姓名，职位，薪水</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">    cursor cemp is select empno,ename,job,sal from emp;</span><br><span class="line">    pempno emp.empno%type;</span><br><span class="line">    pename emp.ename%type;</span><br><span class="line">    pjob   emp.job%type;</span><br><span class="line">    psal   emp.sal%type;</span><br><span class="line">begin</span><br><span class="line">    open cemp;</span><br><span class="line">    loop</span><br><span class="line">        fetch cemp into pempno,pename,pjob,psal;</span><br><span class="line">        exit when cemp%notfound;</span><br><span class="line">        if pjob&#x3D;&#39;ANALYST&#39; then</span><br><span class="line">            update emp set sal &#x3D; sal + 1000 where empno &#x3D; pempno;</span><br><span class="line">        elsif pjob&#x3D;&#39;MANAGER&#39; then</span><br><span class="line">            update emp set sal &#x3D; sal + 800 where empno &#x3D; pempno;</span><br><span class="line">        else </span><br><span class="line">        update emp set sal &#x3D; sal + 400 where empno &#x3D; pempno;</span><br><span class="line">        end if;</span><br><span class="line">    end loop;</span><br><span class="line">    commit;</span><br><span class="line">    close cemp;</span><br><span class="line">end;</span><br><span class="line">&#x2F;</span><br></pre></td></tr></table></figure><h3 id="异常、例外"><a href="#异常、例外" class="headerlink" title="异常、例外"></a>异常、例外</h3><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在declare节中定义例外   </span><br><span class="line">out_of   exception ;</span><br><span class="line"></span><br><span class="line"> 在begin节中可行语句中抛出例外  </span><br><span class="line">raise out_of ；</span><br><span class="line"></span><br><span class="line"> 在exception节处理例外</span><br><span class="line">when out_of then …</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Oracle-预定义异常21个"><a href="#Oracle-预定义异常21个" class="headerlink" title="Oracle 预定义异常21个"></a>Oracle 预定义异常21个</h4><p><img src="https://img-blog.csdnimg.cn/20201008102454795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dsb3JpYV9tNjY2,size_16,color_FFFFFF,t_70#pic_center" alt="Oracle预定义异常"></p><h5 id="01-使用oracle系统内置例外，演示除0例外【zero-divide】"><a href="#01-使用oracle系统内置例外，演示除0例外【zero-divide】" class="headerlink" title="01.使用oracle系统内置例外，演示除0例外【zero_divide】"></a>01.使用oracle系统内置例外，演示除0例外【zero_divide】</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">    myresult number;</span><br><span class="line">begin</span><br><span class="line">    myresult :&#x3D; 1&#x2F;0;</span><br><span class="line">    dbms_output.put_line(myresult);</span><br><span class="line">exception</span><br><span class="line">    when zero_divide then </span><br><span class="line">     dbms_output.put_line(&#39;除数不能为0&#39;);</span><br><span class="line">     delete from emp;  </span><br><span class="line">end;</span><br><span class="line">&#x2F;</span><br></pre></td></tr></table></figure><h5 id="02-使用oracle系统内置例外，查询100号部门的员工姓名，演示没有找到数据【no-data-found】"><a href="#02-使用oracle系统内置例外，查询100号部门的员工姓名，演示没有找到数据【no-data-found】" class="headerlink" title="02.使用oracle系统内置例外，查询100号部门的员工姓名，演示没有找到数据【no_data_found】"></a>02.使用oracle系统内置例外，查询100号部门的员工姓名，演示没有找到数据【no_data_found】</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">    pename varchar2(20);</span><br><span class="line">begin</span><br><span class="line">    select ename into pename from emp where deptno &#x3D; 100;</span><br><span class="line">    dbms_output.put_line(pename);</span><br><span class="line">exception</span><br><span class="line">    when NO_DATA_FOUND then </span><br><span class="line">     dbms_output.put_line(&#39;查无该部门员工&#39;);</span><br><span class="line">     insert into emp(empno,ename) values(1111,&#39;ERROR&#39;);</span><br><span class="line">end;</span><br><span class="line">&#x2F;</span><br></pre></td></tr></table></figure><h2 id="存储过程和存储函数"><a href="#存储过程和存储函数" class="headerlink" title="存储过程和存储函数"></a>存储过程和存储函数</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><h4 id="过程的语法"><a href="#过程的语法" class="headerlink" title="过程的语法"></a>过程的语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create [or replace] procedure 过程名[(参数列表)]  </span><br><span class="line">as</span><br><span class="line">        PLSQL程序体；【begin…end;&#x2F;】</span><br></pre></td></tr></table></figure><h4 id="函数的语法"><a href="#函数的语法" class="headerlink" title="函数的语法"></a>函数的语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE [OR REPLACE] FUNCTION 函数名【(参数列表) 】</span><br><span class="line"> RETURN  返回值类型</span><br><span class="line">AS</span><br><span class="line">PLSQL子程序体；</span><br><span class="line"></span><br><span class="line">【begin…end;&#x2F;】</span><br></pre></td></tr></table></figure><p><strong>无论是过程还是函数，as关键字都代替了declare关键字。</strong></p><h5 id="创建过程hello-world"><a href="#创建过程hello-world" class="headerlink" title="创建过程hello world"></a>创建过程hello world</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE PROCEDURE hello</span><br><span class="line">AS</span><br><span class="line">  BEGIN</span><br><span class="line">    dbms_output.put_line(&#39;hello world&#39;);</span><br><span class="line">  END;</span><br></pre></td></tr></table></figure><h4 id="调用过程的三种方式："><a href="#调用过程的三种方式：" class="headerlink" title="调用过程的三种方式："></a>调用过程的三种方式：</h4><ul><li>exec过程名【SQLPLUS中使用】</li><li><strong>PLSQL程序调用</strong></li><li>Java调用</li></ul><h5 id="01-创建有参存储过程raiseSalary-编号-，为7369号员工涨10-的工资，演示in的用法，默认in，大小写不敏感"><a href="#01-创建有参存储过程raiseSalary-编号-，为7369号员工涨10-的工资，演示in的用法，默认in，大小写不敏感" class="headerlink" title="01.创建有参存储过程raiseSalary(编号)，为7369号员工涨10%的工资，演示in的用法，默认in，大小写不敏感"></a>01.创建有参存储过程raiseSalary(编号)，为7369号员工涨10%的工资，演示in的用法，默认in，大小写不敏感</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE or REPLACE PROCEDURE bb(pempno in NUMBER)</span><br><span class="line">  AS</span><br><span class="line">  BEGIN</span><br><span class="line">    UPDATE EMP</span><br><span class="line">    SET sal &#x3D; sal * 1.2</span><br><span class="line">    WHERE empno &#x3D; pempno;</span><br><span class="line"></span><br><span class="line">  END;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">  bb(7369);</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><h5 id="02-创建有参存储过程findEmpNameAndSalAndJob-编号-，查询7788号员工的的姓名，职位，月薪，返回多个值，演示out的用法"><a href="#02-创建有参存储过程findEmpNameAndSalAndJob-编号-，查询7788号员工的的姓名，职位，月薪，返回多个值，演示out的用法" class="headerlink" title="02.创建有参存储过程findEmpNameAndSalAndJob(编号)，查询7788号员工的的姓名，职位，月薪，返回多个值，演示out的用法"></a>02.创建有参存储过程findEmpNameAndSalAndJob(编号)，查询7788号员工的的姓名，职位，月薪，返回多个值，演示out的用法</h5><p>创建过程：<strong>在过程中的参数，默认值是IN，如果是输出的话，那么我们要指定为OUT。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE PROCEDURE find(pempno IN NUMBER, psal OUT VARCHAR2, pename OUT VARCHAR2, pjob OUT VARCHAR2)</span><br><span class="line">AS</span><br><span class="line">  BEGIN</span><br><span class="line">    SELECT</span><br><span class="line">      ename,</span><br><span class="line">      sal,</span><br><span class="line">      job</span><br><span class="line">    INTO pename, psal, pjob</span><br><span class="line">    FROM emp</span><br><span class="line">    WHERE empno &#x3D; pempno;</span><br><span class="line">  END;</span><br></pre></td></tr></table></figure><p>调用：在调用的时候，使用到的psal，pname，pjob在调用的时候都没有定义的，因此我们<strong>需要先定义变量后使用！</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DECLARE</span><br><span class="line">  psal   emp.sal%TYPE;</span><br><span class="line">  pename emp.ename%TYPE;</span><br><span class="line">  pjob   emp.job%TYPE;</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line">  find(7788, psal, pename, pjob);</span><br><span class="line"></span><br><span class="line">  dbms_output.put_line(psal || pename || pjob);</span><br><span class="line"></span><br><span class="line">END;&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
          <category> PLSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 下 Oracle 安装</title>
      <link href="/2019/01/07/Linux%E4%B8%8BOracle%E5%AE%89%E8%A3%85/"/>
      <url>/2019/01/07/Linux%E4%B8%8BOracle%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h4 id="1-下载插件"><a href="#1-下载插件" class="headerlink" title="1. 下载插件"></a>1. 下载插件</h4><p>在目前有网络的情况下下载如下插件，使用yum即可</p><p>libstdc++-devel(x86_64)</p><p> libaio-devel(x86_64)</p><p> gcc-c++(x86_64) </p><p>elfutils-libelf-devel</p><p>进入/etc/sysconfig/network-scirpts/</p><p>看是否有ifcfg-eth0和ifcfg-eth1</p><p>hostnamectl set-hostname name01</p><p>Hostname</p><h4 id="2-添加组"><a href="#2-添加组" class="headerlink" title="2.添加组"></a>2.添加组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">groupadd oinstall</span><br><span class="line">groupadd dba</span><br><span class="line">useradd -g oinstall -G dba oracle</span><br><span class="line">passwd oracle</span><br><span class="line">TYPE THE PASSWORD</span><br><span class="line">vim &#x2F;etc&#x2F;sysctl.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fs.aio-max-nr &#x3D; 1048576</span><br><span class="line">fs.file-max &#x3D; 6815744</span><br><span class="line">kernel.shmall &#x3D; 2097152</span><br><span class="line">kernel.shmmax &#x3D; 2147483648</span><br><span class="line">kernel.shmmni &#x3D; 4096</span><br><span class="line">kernel.sem &#x3D; 250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range &#x3D; 9000 65500</span><br><span class="line">net.core.rmem_default &#x3D; 262144</span><br><span class="line">net.core.rmem_max &#x3D; 4194304</span><br><span class="line">net.core.wmem_default &#x3D; 262144</span><br><span class="line">net.core.wmem_max &#x3D; 1048586</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br><span class="line">sysctl -a</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;security&#x2F;limits.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">oracle soft nproc 2047</span><br><span class="line">oracle hard nproc 16384</span><br><span class="line">oracle soft nofile 1024</span><br><span class="line">oracle hard nofile 65536</span><br></pre></td></tr></table></figure><p>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</p><p>​    #public ip</p><p>192.168.122.100  ym01 192.168.122.101  ym02</p><p>​    # Virtual</p><p>192.168.122.103  ym01-vip 192.168.122.104  ym02-vip</p><p>​    # private ip </p><p>10.10.10.10 ym01-priv 10.10.10.20  ym02-priv</p><p>​    # Scan ip</p><p>192.168.122.105 rac-scan</p><h4 id="2、找出scsi的id号"><a href="#2、找出scsi的id号" class="headerlink" title="2、找出scsi的id号"></a>2、找出scsi的id号</h4><p>/usr/lib/udev/scsi_id -g -u /dev/sdb #注意scsi_id的二进制文件路径</p><h4 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall -y &quot;X Window System&quot;</span><br><span class="line">ssh -X oracle@192.168.33.15</span><br></pre></td></tr></table></figure><p>cd /stage/grid</p><p>检查环境</p><p>./runcluvfy.sh stage -pre crsinst -n ym01,ym02 -fixup -verbose</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;runInstaller</span><br></pre></td></tr></table></figure><p>后面后弹出安装Oracle图形界面，根据提示走就好，大致流程如下</p><p>Skip software updates. =&gt; Advanced installation =&gt; Simplified Chinese =&gt; raw-scan ran-scan 1521 =&gt;ym01-vip =&gt; eth0 eth1</p><p><strong>一、查看系统环境</strong></p><p><strong>内核版本：</strong></p><p><strong>[root@rh64 rules.d]# uname -a</strong></p><p><strong>Linux rh64 2.6.32-358.el6.x86_64 #1 SMP Tue Jan 29 11:47:41 EST 2013 x86_64 x86_64 x86_64 GNU/Linux</strong></p><p><strong>系统用户：</strong></p><p><strong>[root@rh64 rules.d]# id grid</strong></p><p>uid=400(grid) gid=400(asmadmin) groups=400(asmadmin)</p><p><strong>二、创建共享磁盘（可以采用分区或独立的磁盘）</strong></p><p>[root@rh64 ~]# fdisk -l</p><p>Disk /dev/sdc: 24.3 GB, 24323964928 bytes</p><p>255 heads, 63 sectors/track, 2957 cylinders</p><p>Units = cylinders of 16065 * 512 = 8225280 bytes</p><p>Sector size (logical/physical): 512 bytes / 512 bytes</p><p>I/O size (minimum/optimal): 512 bytes / 512 bytes</p><p>Disk identifier: 0x00000000</p><p><strong>查看磁盘UUID:</strong></p><p><strong>[root@rh64 ~]# /sbin/scsi_id -g -u -d /dev/sdc</strong></p><p><strong>1ATA_VBOX_HARDDISK_VB3d5ccb5e-9c197b67</strong></p><hr><p><strong>scsi_id -gud /dev/sdc</strong></p><hr><p><strong>磁盘分区：</strong></p><p><strong>[root@rh64 ~]# fdisk -l</strong></p><p>Disk /dev/sdc: 24.3 GB, 24323964928 bytes</p><p>255 heads, 63 sectors/track, 2957 cylinders</p><p>Units = cylinders of 16065 * 512 = 8225280 bytes</p><p>Sector size (logical/physical): 512 bytes / 512 bytes</p><p>I/O size (minimum/optimal): 512 bytes / 512 bytes</p><p>Disk identifier: 0xeb09f8d3</p><p> Device Boot   Start     End   Blocks  Id System</p><p><strong>/dev/sdc1        1     915   7349706  83 Linux</strong></p><p><strong>/dev/sdc2       916    1830   7349737+ 83 Linux</strong></p><p><strong>/dev/sdc3      1831    2957   9052627+ 83 Linux</strong></p><p><strong>三、建立UDEV规则文件</strong></p><p><strong>[root@rh64 ~]# cd /etc/udev/rules.d/</strong></p><p>[root@rh64 rules.d]# ls</p><p>60-fprint-autosuspend.rules 60-raw.rules       80-kvm.rules  97-bluetooth-serial.rules</p><p>60-openct.rules       70-persistent-cd.rules  90-alsa.rules 98-kexec.rules</p><p>60-pcmcia.rules       70-persistent-net.rules 90-hal.rules  99-fuse.rules</p><p><strong>[root@rh64 rules.d]# cat 99-oracle-asmdisk.rules</strong></p><p>KERNEL==”sdc1”, BUS==”scsi”, PROGRAM==”/sbin/scsi_id -g -u -d /dev/$parent”, RESULT==”1ATA_VBOX_HARDDISK_VB3d5ccb5e-9c197b67”, NAME=”asm_disk1”, OWNER=”grid”, GROUP=”asmadmin”, MODE=”0660”</p><p>KERNEL==”sdc2”, BUS==”scsi”, PROGRAM==”/sbin/scsi_id -g -u -d /dev/$parent”, RESULT==”1ATA_VBOX_HARDDISK_VB3d5ccb5e-9c197b67”, NAME=”asm_disk2”, OWNER=”grid”, GROUP=”asmadmin”, MODE=”0660”</p><p>KERNEL==”sdc3”, BUS==”scsi”, PROGRAM==”/sbin/scsi_id -g -u -d /dev/$parent”, RESULT==”1ATA_VBOX_HARDDISK_VB3d5ccb5e-9c197b67”, NAME=”asm_disk3”, OWNER=”grid”, GROUP=”asmadmin”, MODE=”0660”</p><p><strong>四、启动udev service</strong></p><p><strong>载入配置文件**</strong>：**</p><p><strong>[root@rh64 rules.d]# udevadm control –reload-rules</strong></p><p><strong>启动udev service：</strong></p><p><strong>[root@rh64 rules.d]# start_udev</strong></p><p>Starting udev:</p><p><strong>查看asm disks：</strong></p><p>[root@rh64 rules.d]# ls -l /dev/asm*</p><p><strong>brw-rw—- 1 grid asmadmin 8, 33 Jan 13 16:52 /dev/asm_disk1</strong></p><p><strong>brw-rw—- 1 grid asmadmin 8, 34 Jan 13 16:52 /dev/asm_disk2</strong></p><p><strong>brw-rw—- 1 grid asmadmin 8, 35 Jan 13 16:52 /dev/asm_disk3</strong></p><hr><p><strong>——–至此，asm disk创建成功 ！</strong></p><p>1c3b15b1-cd13-4a73-b2a8-449fa3aa039f</p><p>babf62f1-d914-434c-a1a3-d323a01d1e81</p>]]></content>
      
      
      <categories>
          
          <category> Guide </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归与迭代的区别分析</title>
      <link href="/2018/10/07/%E9%80%92%E5%BD%92%E4%B8%8E%E8%BF%AD%E4%BB%A3%E7%9A%84%E5%8C%BA%E5%88%AB%E5%88%86%E6%9E%90/"/>
      <url>/2018/10/07/%E9%80%92%E5%BD%92%E4%B8%8E%E8%BF%AD%E4%BB%A3%E7%9A%84%E5%8C%BA%E5%88%AB%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>递归和迭代是很重要的编程思想，所以对于其原理还是很有必要清楚的。</p><p><strong>迭代(iteration)</strong>   在 <a href="https://en.wikipedia.org/wiki/Iteration"><strong>维基百科</strong></a> 上是这样介绍的：</p><blockquote><p>Iteration is the repetition of a process in order to generate a (possibly unbounded) sequence of outcomes. The sequence will approach some end point or end value. Each repetition of the process is a single iteration, and the outcome of each iteration is then the starting point of the next iteration.</p><p>迭代是重复反馈过程的活动，其目的通常是为了接近并到达所需的目标或结果。每一次对过程的重复被称为一次“迭代”，而每一次迭代得到的结果会被用来作为下一次迭代的初始值。</p></blockquote><p>上面介绍可以说是非常细致详尽了，这里还是来个小例子具体说明下我对迭代的理解吧～</p><h5 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h5><p>目的： 接近并达到所需的 <strong>目标或结果</strong><br>过程：重复反馈每一次 <strong>过程</strong><br>文字描述：可以这么想，我左手一袋小球(3个)，右手一袋小球（5个），我想知道这两袋里面一共有几个小球，可是我不会加法运算啊（我朋友们也不会），咋办呢，把它给我朋友折腾吧，折腾完给我个结果。<br>于是我把它交给朋友A，朋友A把左手袋子里的小球拿出一个放到了右手袋子里，告诉朋友B：我左手这袋子有两个小球，右手这袋子里有6个小球，又给了朋友B，朋友B照做又给了朋友C……</p><h5 id="图示如下："><a href="#图示如下：" class="headerlink" title="图示如下："></a>图示如下：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[我 3,5] -- 2,6--&gt; B</span><br><span class="line">B -- 1,7--&gt; C</span><br><span class="line">C -- 0,8--&gt; D</span><br><span class="line">D -- 8 --&gt; A</span><br></pre></td></tr></table></figure><p>即：<br>3 + 5 &nbsp; |<br>2 + 6 &nbsp;   |<br>1 + 7 &nbsp; |<br>0 + 8 &nbsp; |<br>8 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;  |<br>————<br>时间复杂度为 O(x)<br>空间复杂度为O(1)</p><hr><p><strong>递归（Recursion）</strong> 在 <a href="https://en.wikipedia.org/wiki/Recursion"><strong>维基百科</strong></a> 上是这样介绍的：</p><blockquote><p>Recursion occurs when a thing is defined in terms of itself or of its type. Recursion is used in a variety of disciplines ranging from linguistics to logic. The most common application of recursion is in mathematics and computer science, where a function being defined is applied within its own definition. While this apparently defines an infinite number of instances (function values), it is often done in such a way that no loop or infinite chain of references can occur.<br>递归（英语：Recursion），又译为递回，在数学与计算机科学中，是指在函数的定义中使用函数自身的方法。递归一词还较常用于描述以自相似方法重复事物的过程。例如，当两面镜子相互之间近似平行时，镜中嵌套的图像是以无限递归的形式出现的。也可以理解为自我复制的过程。</p></blockquote><p><strong>通俗点说</strong>，递归就是那个脍炙人口的故事：从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？“从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？‘从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？……’”<br>典型案例：<a href="https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97">斐波那契数列</a><br>还是上面分小球的例子，递归就是在过程中得到的结果，还要将结果返回给自身，然后继续传下去…小伙伴们一起忙起来～啦啦啦～</p><h4 id="图示如下：-1"><a href="#图示如下：-1" class="headerlink" title="图示如下："></a>图示如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[ 我] -- 3,5--&gt; B(B +1)</span><br><span class="line">B -- 8--&gt; A[ 我] </span><br><span class="line">B -- 2,5--&gt; C(C+1)</span><br><span class="line">C -- 7 --&gt; B</span><br><span class="line">C -- 1,5 --&gt; D(D ...)</span><br><span class="line">D -- 6 --&gt; C</span><br></pre></td></tr></table></figure><p>即：<br>3 + 5&nbsp; |<br>1 + 2 + 5&nbsp; |<br>1 + 1 + 1 + 5&nbsp; |<br>1 + 1 + 1 + 0 +5&nbsp; |<br>1 + 1 + 1 + 5&nbsp; |<br>1 + 1 + 6&nbsp; |<br>1 + 7&nbsp; |<br>8&nbsp; |<br>时间复杂度为 O(x)<br>空间复杂度为O(x)</p><p>若发生事物故障，迭代过程中的数据已经保存在了程序中了，而递归会有一些不可见的过程在暗暗发生…（蹊跷地那种呦～/逃</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thinking </tag>
            
            <tag> CS61a </tag>
            
            <tag> Iteration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>检索英语中的冒犯语</title>
      <link href="/2018/10/07/%E6%A3%80%E7%B4%A2%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E5%86%92%E7%8A%AF%E8%AF%AD/"/>
      <url>/2018/10/07/%E6%A3%80%E7%B4%A2%E8%8B%B1%E8%AF%AD%E4%B8%AD%E7%9A%84%E5%86%92%E7%8A%AF%E8%AF%AD/</url>
      
        <content type="html"><![CDATA[<p>今天发现一个很有趣的英语检索冒犯语（profanity）的网站，这个网站由 Google 开发的。<br>网站名称为：What do you like.<br>用法如下：</p><ul><li><p>地址栏输入如下链接</p><p><a href="http://www.wdylike.appspot.com/?q=">http://www.wdylike.appspot.com/?q=</a></p></li><li><p>后面输入你要检索的词语（句子也可）</p></li></ul><p>可以这样：  <a href="http://www.wdylike.appspot.com/?q=fuck">http://www.wdylike.appspot.com/?q=fuck</a></p><p>敲下 回车，是不是冒犯语地址栏给你答案～</p><hr><p>那么如何用 Pthon检索文档中的冒犯语呢？</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>读取文本 -&gt; 检查文本 -&gt; 判断输出</p><p><a href="https://docs.python.org/2/library/functions.html">Python 内置函数文档</a><br><a href="https://docs.python.org/2/library/urllib.html">urllib 的文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import urllib</span><br><span class="line">def read_text():</span><br><span class="line">    quotes &#x3D; open(&quot;&#x2F;Users&#x2F;gloriazhang&#x2F;Documents&#x2F;movie_quotes.txt&quot;)</span><br><span class="line">    contents_of_file &#x3D; quotes.read()</span><br><span class="line">    print(contents_of_file)</span><br><span class="line">    quotes.close()</span><br><span class="line">    check_profanity(contents_of_file)</span><br><span class="line"></span><br><span class="line">def check_profanity(text_to_check):</span><br><span class="line">    connection &#x3D; urllib.urlopen(&quot;http:&#x2F;&#x2F;www.wdylike.appspot.com&#x2F;?q&#x3D;&quot;+text_to_check)</span><br><span class="line">    output &#x3D; connection.read()</span><br><span class="line">    #print(output)</span><br><span class="line">    if &quot;true&quot; in output:</span><br><span class="line">        print(&quot;Profanity!&quot;)</span><br><span class="line">    elif &quot;false&quot; in output:</span><br><span class="line">        print(&quot;This ducument has no curse words!&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;Could not scan&quot;)</span><br><span class="line">    connection.close()</span><br><span class="line">    </span><br><span class="line">read_text()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="输出如下："><a href="#输出如下：" class="headerlink" title="输出如下："></a>输出如下：<img src="https://img-blog.csdnimg.cn/20190128203119503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dsb3JpYV9tNjY2,size_16,color_FFFFFF,t_70" alt="检索冒犯语句"></h4>]]></content>
      
      
      <categories>
          
          <category> RD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode 常用快捷键整理</title>
      <link href="/2018/10/07/VScode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%95%B4%E7%90%86/"/>
      <url>/2018/10/07/VScode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h4><p><a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf">VScode 快捷键速查 ( windows )</a><br><a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf">VScode 快捷键速查( mac )</a></p><h5 id="快捷键和平台无关，思想一致，本文主要以-Mac-为主，常用快捷键不断更新中…"><a href="#快捷键和平台无关，思想一致，本文主要以-Mac-为主，常用快捷键不断更新中…" class="headerlink" title="快捷键和平台无关，思想一致，本文主要以 Mac 为主，常用快捷键不断更新中…"></a>快捷键和平台无关，思想一致，本文主要以 Mac 为主，常用快捷键不断更新中…</h5><h4 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a><strong>常用快捷键</strong></h4><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>⌘/</td><td>Toggle Line Comment（行注释）</td></tr><tr><td>⇧⌥A</td><td>Toggle Block Comment（块注释）</td></tr><tr><td>Option + 左右方向键</td><td>以单词为颗粒度跳动</td></tr><tr><td>Option + 左右方向键 + Shift 键</td><td>选中光标前/后所有字符</td></tr><tr><td>Cmd+ 左方向键</td><td>移至行首 (Home）/行尾（End）</td></tr><tr><td>Cmd/Ctrl  + Shift + \</td><td>代码块间的光标移动</td></tr><tr><td>fn + delete</td><td>删除右侧字符</td></tr></tbody></table><h4 id="VScode快捷键入门"><a href="#VScode快捷键入门" class="headerlink" title="VScode快捷键入门"></a>VScode快捷键入门</h4><ul><li><strong>命令面板</strong>是个很重要的存在，它是所有快捷键的主要交互界面。<br>那么，如何使用它呢？<br>⌘⇧P   打开命令面板，搜索 shell 指令：在 PATH 中安装 “Code” 命令并执行，重启模拟器。现在，在终端输入 <code>code -help</code>就可以看到VScode所支持的所有参数。<img src="https://img-blog.csdnimg.cn/20190719101252596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dsb3JpYV9tNjY2,size_16,color_FFFFFF,t_70" alt="cosw --help"><br>这时，如果你想打开文件，可以在终端输入 <code>code -r</code> 打开vscode，进行窗体的复用。你也可以使用参数 -g <a href="fle:line[:character]">fle:line[:character]</a> 打开文件，然后滚动到文件中某个特定的行和列。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
          <category> VScode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VScode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网路常用命令</title>
      <link href="/2018/10/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E8%B7%AF%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/10/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E8%B7%AF%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h4><ul><li>netstat -a   正在使用的所用端口</li><li>nslookup <a href="http://www.google.com/">www.google.com</a>  DNS 服务器信息</li><li>netsh wlan show profile   连接到计算机的所有配置文件</li></ul><h4 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h4><ul><li><a href="https://www.geeksforgeeks.org/computer-network-tcpip-model/">TCP/IP &lt;–&gt; OSI</a></li><li><a href="https://www.geeksforgeeks.org/layers-osi-model/">OSI</a></li></ul><h4 id="网络的优缺点"><a href="#网络的优缺点" class="headerlink" title="网络的优缺点"></a>网络的优缺点</h4><ul><li>优点</li></ul><ul><li>数据共享</li><li>任何人都可以连接到网络</li><li>更快地解决问题</li><li>可靠性（设备崩溃，另一个设备继续访问类似信息的副本）</li><li>具有高度的灵活性</li><li>通过授权进行</li><li>提高了存储容量</li></ul><ul><li>缺点</li></ul><ul><li>缺乏稳健型</li><li>缺乏独立性</li><li>病毒和恶意软件</li><li>网络成本</li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thinking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 基础-实验楼</title>
      <link href="/2018/10/03/CSS%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C%E6%A5%BC/"/>
      <url>/2018/10/03/CSS%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C%E6%A5%BC/</url>
      
        <content type="html"><![CDATA[<h3 id="高级框操作"><a href="#高级框操作" class="headerlink" title="高级框操作"></a>高级框操作</h3><p>当你使用绝对的值设置了一个框的大小（如，固定像素的宽/高），允许的大小可能不适合放置内容，这种情况下内容会从盒子溢流。我们使用 overflow 属性来控制这种情况的发生。常用的值：</p><ul><li>auto:当内容过多的时候溢流的内容被隐藏，然后出现滚动条，让我们滚动查看所有的内容。</li><li>hidden: 当内容过多，溢流的内容被隐藏。</li><li>visible: 当内容过多，溢流的内容被显示在盒子的外边。</li></ul><h4 id="CSS-框类型"><a href="#CSS-框类型" class="headerlink" title="CSS 框类型"></a>CSS 框类型</h4><p>display 属性有很多的属性值。这里着重讲三个常见的 :block, inline, 和 inline-block。</p><ul><li>块级元素的特点：<ol><li>一个块级元素独占一行。</li><li>元素的高度、宽度、行高以及顶和底边距都可设置。</li><li>元素宽度在不设置的情况下，是它本身父容器的 100%（和父元素的宽度一致），除非设定一个宽度。</li><li>常见的块级元素：div、p、h1、form、ul和 li。</li></ol></li><li>行内元素的特点：<ol><li>和其他元素都在一行上。</li><li>元素的高度、宽度、行高及顶部和底部边距不可设置。</li><li>元素的宽度就是它包含的文字或图片的宽度，不可改变。</li><li>常见的行内元素：a、span、br、i、em&gt;、strong、label。</li></ol></li><li>行内块元素特点：同时具备内联元素、块状元素的特点。常见行内块元素：img、input。</li></ul><h3 id="Web-字体"><a href="#Web-字体" class="headerlink" title="Web 字体"></a>Web 字体</h3><p>首先我们通过 @font-face 指定要下载的字体文件。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">      <span class="attribute">font-family</span>: <span class="string">&quot;Bitstream Vera Serif Bold&quot;</span>;</span><br><span class="line">      <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&quot;http://developer.mozilla.org/@api/deki/files/2934/=VeraSeBd.ttf&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后使用 @font-face 中指定的字体种类名称来将你的定制字体应用到你需要的地方，比如说：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font-family</span>: <span class="string">&quot;Bitstream Vera Serif Bold&quot;</span>, serif &#125;</span><br></pre></td></tr></table></figure><h3 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h3><p> flex 模型： <img src="https://mdn.mozillademos.org/files/3739/flex_terms.png/vm" alt="img"></p><h4 id="容器的属性："><a href="#容器的属性：" class="headerlink" title="容器的属性："></a>容器的属性：</h4><ul><li>flex-direction 属性：设置主轴的方向（也就是项目的排列方向）。它的取值有：<ul><li>row（默认值）：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul></li><li>flex-wrap属性：默认情况下，项目都排在一条线（轴线）上。flex-wrap 属性定义如果一条轴线排不下，如何换行。它的取值有：<ul><li>nowrap（默认）：不换行。</li><li>wrap：换行，第一行在上方。</li><li>wrap-reverse：换行，第一行在下方。</li></ul></li><li>flex-flow 属性是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 row nowrap。</li><li>justify-content 属性定义了项目在主轴上的对齐方式。它的取值有：<ul><li>flex-start：使所有 flex 项都位于主轴的开始处。</li><li>flex-end：使所有 flex 项到主轴的结尾处。</li><li>center：使 flex 项在主轴居中。</li><li>space-between：使 flex 项两端对齐，项目之间的间隔都相等。</li><li>space-around：使每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul></li><li>align-items 属性定义项目在交叉轴上如何对齐。它可能取5个值，具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下：<ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为 auto，将占满整个容器的高度。</li></ul></li><li>align-content 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。它的可能取值为：<ul><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。</li></ul></li></ul><h4 id="项目的属性："><a href="#项目的属性：" class="headerlink" title="项目的属性："></a>项目的属性：</h4><ul><li>order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为 0。</li><li>flex-grow 属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。如果所有项目的 flex-grow 属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</li><li>flex-shrink 属性定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小。负值对该属性无效。</li><li>flex-basis 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 auto，即项目的本来大小。它可以设为跟 width 或 height 属性一样的值（比如 350 px），则项目将占据固定空间。</li><li>flex 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。后两个属性可选。该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</li><li>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。该属性可能取 6 个值，除了 auto，其他都与 align-items 属性完全一致。</li></ul><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li><p>background-image 还有一组可用的值：颜色渐变。通过 linear-gradient() 函数设置，函数至少需要用逗号分隔的三个参数——背景中渐变的方向，开始的颜色和结尾的颜色。例如：</p></li><li><style>  .box{            width: 100px;            height: 100px;            background-image:     linear-gradient(to bottom, red, blue);            }</style></li></ul><h3 id="轮廓"><a href="#轮廓" class="headerlink" title="轮廓"></a>轮廓</h3><ul><li>outline-color 设置轮廓的颜色。取值和其余颜色的取值一样。</li><li>outline-style 设置轮廓的样式。取值如下：</li></ul><ul><li>outline-width 设置轮廓的宽度。它的值有：<ul><li>thin 规定细轮廓。</li><li>medium 默认取值规定中等的轮廓。</li><li>thick 规定粗的轮廓。</li><li>length 允许你自定义轮廓粗细的值。</li><li>inherit 规定应该从父元素继承轮廓宽度的设置。</li></ul></li><li>outline 上面三个属性的连写。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">      <span class="selector-tag">p</span> &#123;</span><br><span class="line">          <span class="attribute">outline</span>: red dotted thick;</span><br><span class="line">          <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &lt;/<span class="selector-tag">style</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><p>box-shadow 属性设置盒子阴影。box-shadow 有四个值:</p><ul><li><p>第一个值是水平偏移量（水平阴影）：即向右的距离，阴影被从原始的框中偏移(如果值为负的话则为左)。</p></li><li><p>第二个值是垂直偏移量（垂直阴影）：即阴影从原始盒子中向下偏移的距离(或向上，如果值为负)。</p></li><li><p>第三个值是模糊半径（影子大小）：即在阴影中应用的模糊度。</p></li><li><p>第四个值是阴影的基本颜色。你可以使用任何长度和颜色单位来定义这些值。</p><p>box-shadow: 5px 5px 5px red;</p></li></ul><p>使用 inset 关键字，把它放在一个影子声明的开始，使它变成一个内部阴影，而不是一个外部阴影。</p><p> box-shadow: inset 5px 5px 5px red;</p><h3 id="选择器分类"><a href="#选择器分类" class="headerlink" title="选择器分类"></a>选择器分类</h3><ul><li>基础选择器：标签选择器，类选择器，ID 选择器，通配符选择器</li><li>组合选择器：标签指定式选择器，后代选择器，并集选择器</li><li>属性选择器</li><li>伪类选择器</li></ul><h3 id="样式优先级"><a href="#样式优先级" class="headerlink" title="样式优先级"></a>样式优先级</h3><h4 id="优先级："><a href="#优先级：" class="headerlink" title="优先级："></a>优先级：</h4><ul><li>规则（1）：行内样式 &gt; 页内样式 &gt; 外部引用样式 &gt; 浏览器默认样式。</li><li>规则（2）：important &gt; 内联 &gt; ID &gt; 伪类|类 | 属性选择 &gt; 标签 &gt; 伪对象 &gt; 通配符 &gt; 继承。另外权重会叠加，所以为了便于理解，权重设置如下：<ul><li>1 表示标签选择器的权重</li><li>10 表示类选择器的权重</li><li>100 表示 ID 选择器的权重</li><li>1000 表示内联样式的权重</li></ul></li></ul><p>注：权重相同时，CSS 遵循就近原则。也就是说靠近元素的样式具有最大的优先级，或者说排在最后的样式优先级最大。所有都相同时，声明靠后的优先级大。</p><h3 id="CSS-排版"><a href="#CSS-排版" class="headerlink" title="CSS 排版"></a>CSS 排版</h3><h4 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>：<span class="selector-tag">static</span>;</span><br></pre></td></tr></table></figure><p>静态定位是每个元素获取的默认值，所以我们基本上都不需要再单独设置它</p><h4 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>：<span class="selector-tag">absolute</span>;</span><br></pre></td></tr></table></figure><p>绝对定位有以下特点：</p><ul><li>绝对定位以浏览器左上角为基准设置位置</li><li>当一个盒子包含在另一个盒子中，父盒子未设置定位，子盒子以浏览器左上角为基准设置位置； 当父盒子设置定位，子盒子以父盒子左上角为基准设置位置</li><li>绝对定位不占空间位置（类似于浮动）</li></ul><h4 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>：<span class="selector-tag">relative</span>;</span><br></pre></td></tr></table></figure><p>相对定位有以下特点：</p><ul><li>相对定位以元素自身的位置为基准设置位置</li><li>相对定位要占空间位置</li><li>一般子元素设置绝对定位，父元素设置相对定位（子绝父相）</li></ul><h4 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h4><p>固定定位表现类似于绝对定位，只有一个主要区别：绝对定位固定元素是相对于 <html> 元素或其最近的定位祖先，而固定定位固定元素则是相对于浏览器视口本身。固定定位也不占空间位置，语法为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>：<span class="selector-tag">fixed</span>;</span><br></pre></td></tr></table></figure><h4 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h4><p>z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。用于处理当多个元素重叠的时候，哪些元素设置在其他元素的顶部。特别需要注意的是元素可拥有负的 z-index 属性值，属性值没有单位，只有数字。Z-index 仅能在定位元素上奏效（例如 position:absolute;）</p>]]></content>
      
      
      <categories>
          
          <category> FontEnd </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机思维-卡内基梅隆大学计算机系主任周以真（英汉对照版）</title>
      <link href="/2018/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%80%9D%E7%BB%B4-%E5%8D%A1%E5%86%85%E5%9F%BA%E6%A2%85%E9%9A%86%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E4%B8%BB%E4%BB%BB%E5%91%A8%E4%BB%A5%E7%9C%9F%EF%BC%88%E8%8B%B1%E6%B1%89%E5%AF%B9%E7%85%A7%E7%89%88%EF%BC%89/"/>
      <url>/2018/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%80%9D%E7%BB%B4-%E5%8D%A1%E5%86%85%E5%9F%BA%E6%A2%85%E9%9A%86%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E4%B8%BB%E4%BB%BB%E5%91%A8%E4%BB%A5%E7%9C%9F%EF%BC%88%E8%8B%B1%E6%B1%89%E5%AF%B9%E7%85%A7%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.cs.cmu.edu/afs/cs/usr/wing/www/publications/Wing06.pdf">英文版CACM</a><br>Jeannette M. Wing (周以真)<br>(翻译：徐韵文，王飞跃, 校对：王飞跃） </p><h2 id="Computational-Thinking"><a href="#Computational-Thinking" class="headerlink" title="Computational Thinking"></a>Computational Thinking</h2><p>It represents a universally applicable attitude and skill set everyone, not just computer scientists, would be eager to learn and use.</p><p>它代表着一种普遍的认识和一类普适的技能，每一个人，不仅仅是计算机科学家，都应热心于它的学习和运用。 </p><p>Computational thinking builds on the power and limits of computing processes, whether they are executed by a human or by a machine. Computational methods and models give us the courage to solve problems and design systems that no one of us would be capable of tackling alone. Computational thinking confronts the riddle of machine intelligence: What can humans do better than computers? and What can computers do better than humans? Most fundamentally it addresses the question: What is computable? Today, we know only parts of the answers to such questions.</p><p>计算思维是建立在计算过程的能力和限制之上的，不管这些过程是由人还是由机器执行的。计算方法和模型给了我们勇气去处理那些原本无法由任何个人独自完成的问题求解和系统设计。计算思维直面机器智能的不解之谜：什么人类能比计算机做得更好？什么计算机能比人类做得更好？最基本的是它涉及这样的问题：什么是可计算的？今天，我们对这些问题的答案仍是一知半解。 </p><p>Computational thinking is a fundamental skill for everyone, not just for computer scientists. To reading, writing, and arithmetic, we should add computational thinking to every child’s analytical ability. Just as the printing press facilitated the spread of the three Rs, what is appropriately incestuous about this vision is that computing and computers facilitate the spread of computational thinking.</p><p>计算思维是每个人的基本技能，不仅仅属于计算机科学家。在阅读、写作和算术（英文简称3R）之外，我们应当将计算思维加到每个孩子的解析能力之中。正如印刷出版促进了3R的传播，计算和计算机也以类似的正反馈促进了计算思维的传播。 </p><p>Computational thinking involves solving problems, designing systems, and understanding human behavior, by drawing on the concepts fundamental to computer science. Computational thinking includes a range of mental tools that reflect the breadth of the field of computer science.</p><p>计算思维涉及运用计算机科学的基础概念去求解问题、设计系统和理解人类的行为。计算思维涵盖了反映计算机科学之广泛性的一系列思维活动。 </p><p>Having to solve a particular problem, we might ask: How difficult is it to solve? and What’s the best way to solve it? Computer science rests on solid theoretical underpinnings to answer such questions precisely. Stating the difficulty of a problem accounts for the underlying power of the machine—the computing device that will run the solution. We must consider the machine’s instruction set, its resource constraints, and its operating environment.</p><p>当求解一个特定的问题时，我们会问：解决这个问题有多困难？怎样才是最佳的解决之道? 计算机科学根据坚实的理论基础来准确地回答这些问题。表明问题的困难程度是为了考量机器——就是用来运行其解的计算工具之基本能力。我们必须考虑机器的指令系统、它的资源约束和它的操作环境。 </p><p>In solving a problem efficiently, we might further ask whether an approximate solution is good enough, whether we can use randomization to our advantage, and whether false positives or false negatives are allowed. Computational thinking is reformulating a seemingly difficult problem into one we know how to solve, perhaps by reduction, embedding, transformation, or simulation.</p><p>为了有效地求解一个问题，我们可能要进一步问：一个近似解是否就足够了，是否可以利用一下随机化，以及是否允许误正或误负。计算思维就是把一个看来困难的问题重新阐述成一个我们知道怎样解的问题，如通过约简、嵌入、转化和仿真的方法。 </p><p>Computational thinking is thinking recursively. It is parallel processing. It is interpreting code as data and data as code. It is type checking as the generalization of dimensional analysis. It is recognizing both the virtues and the dangers of aliasing, or giving someone or something more than one name. It is recognizing both the cost and power of indirect addressing and procedure call. It is judging a program not just for correctness and efficiency but for aesthetics, and a system’s design for simplicity and elegance.</p><p>计算思维是一种递归思维。它是并行处理。它是把代码译成数据又把数据译成代码。它是由推广量纲分析进行的类型检查。对于别名或赋予人与物多个名字的做法，它既知道其益处又了解其害处。对于间接寻址和程序调用的做法，它既知道其威力又了解其代价。它评价一个程序时，不仅仅根据其准确性和效率，还有美学的考量，而对于系统的设计，还考虑简洁和优雅。 </p><p>Computational thinking is using abstraction and decomposition when attacking a large complex task or designing a large complex system. It is separation of concerns. It is choosing an appropriate representation for a problem or modeling the relevant aspects of a problem to make it tractable. It is using invariants to describe a system’s behavior succinctly and declaratively. It is having the confidence we can safely use, modify, and influence a large complex system without understanding its every detail. It is modularizing something in anticipation of multiple users or prefetching and caching in anticipation of future use.</p><p>计算思维采用了抽象和分解来迎战浩大复杂的任务或者设计巨大复杂的系统。它是关注的分离。它是选择合适的方式去陈述一个问题，或者是选择合适的方式对一个问题的相关方面建模使其易于处理。它是利用不变量简明扼要且表述性地刻画系统的行为。它是我们在不必理解每一个细节的情况下就能够安全地使用、调整和影响一个大型复杂系统的信心。它就是为预期的多个用户而进行的模块化，它就是为预期的未来应用而进行的预置和缓存。 </p><p>Computational thinking is thinking in terms of prevention, protection, and recovery from worst-case scenarios through redundancy, damage containment, and error correction. It is calling gridlock deadlock and contracts interfaces. It is learning to avoid race conditions when synchronizing meetings with one another.</p><p>计算思维是通过冗余、堵错、纠错的方式，在最坏情况下进行预防、保护和恢复的一种思维。它称堵塞为死结，叫合同为界面。它就是学习在谐调同步相互会合时如何避免竞争的情形。 </p><p>Computational thinking is using heuristic reasoning to discover a solution. It is planning, learning, and scheduling in the presence of uncertainty. It is search, search, and more search, resulting in a list of Web pages, a strategy for winning a game, or a counterexample. Computational thinking is using massive amounts of data to speed up computation. It is making trade-offs between time and space and between processing power and storage capacity.</p><p>计算思维是利用启发式推理来寻求解答。它就是在不确定情况下的规划、学习和调度。它就是搜索、搜索、再搜索，最后得到的是一系列的网页，一个赢得游戏的策略，或者一个反例。计算思维是利用海量的数据来加快计算。它就是在时间和空间之间，在处理能力和存储容量之间的权衡。 </p><p>Consider these everyday examples: When your daughter goes to school in the morning, she puts in her backpack the things she needs for the day; that’s prefetching and caching. When your son loses his mittens, you suggest he retrace his steps; that’s backtracking. At what point do you stop renting skis and buy yourself a pair?; that’s online algorithms. Which line do you stand in at the supermarket?; that’s performance modeling for multi-server systems. Why does your telephone still work during a power outage?; that’s independence of failure and redundancy in design. How do Completely Automated Public Turing Test(s) to Tell Computers and Humans Apart, or CAPTCHAs, authenticate humans?; that’s exploiting the difficulty of solving hard AI problems to foil computing agents.</p><p>考虑这些日常中的事例：当你女儿早晨去学校时，她把当天需要的东西放进背包；这就是预置和缓存。当你儿子弄丢他的手套时，你建议他沿走过的路回寻；这就是回推。在什么时候你停止租用滑雪板而为自己买一对呢？这就是在线算法。在超市付账时你应当去排哪个队呢？这就是多服务器系统的性能模型。为什么停电时你的电话仍然可用？这就是失败的无关性和设计的冗余性。完全自动的大众图灵测试是如何区分计算机和人类（简称CAPTCHA）的，即CAPTCHAs是怎样鉴别人类的？这就是充分利用求解人工智能难题之艰难来挫败计算代理程序。 </p><p>Computational thinking will have become ingrained in everyone’s lives when words like algorithm and precondition are part of everyone’s vocabulary; when nondeterminism and garbage collection take on the meanings used by computer scientists; and when trees are drawn upside down.</p><p>计算思维将渗入到我们每个人的生活之中，那时诸如算法和前提条件已成为每个人日常词汇的一部分，非确定论和垃圾收集已含有计算机学家所指的含义，而树已常常被倒过来画了。 </p><p>Thinking like a computer scientist means more than being able to program a computer. It requires thinking at multiple levels of abstraction.</p><p>像计算机科学家一样思考意味着不仅仅能够计算机编程。 它需要在多个抽象层面上进行思考。</p><p>We have witnessed the influence of computational thinking on other disciplines. For example, machine learning has transformed statistics. Statistical learning is being used for problems on a scale, in terms of both data size and dimension, unimaginable only a few years ago. Statistics departments in all kinds of organizations are hiring computer scientists. Schools of computer science are embracing existing or starting up new statistics departments.</p><p>我们已见证了计算思维在其它学科中的影响。例如，机器学习已经改变了统计学。就数据尺度和维数而言，统计学习用于各类问题的规模仅在几年前还是不可想象的。各种组织的统计部门都聘请了计算机科学家。计算机学院系正在联姻已有或开设新的统计部门。 </p><p>Computer scientists’ recent interest in biology is driven by their belief that biologists can benefit from computational thinking. Computer science’s contribution to biology goes beyond the ability to search through vast amounts of sequence data looking for patterns. The hope is that data structures and algorithms—our computational abstractions and methods—can represent the structure of proteins in ways that elucidate their function. Computational biology is changing the way biologists think. Similarly, computational game theory is changing the way economists think; nanocomputing, the way chemists think; and quantum computing, the way physicists think.</p><p>计算机学家们近来对生物科学的兴趣是由他们坚信生物学家能够从计算思维中获益的信念驱动的。计算机科学对于生物学的贡献决不限于其能够在海量时序数据中搜索寻找模式规律的本领。最终的希望是数据结构和算法——我们的计算抽象和方法——能够以阐释其功能的方式表示蛋白质的结构。计算生物学正在改变着生物学家的思考方式。类似地，计算博弈理论正改变着经济学家的思考方式，纳米计算改变着化学家的思考方式，量子计算改变着物理学家的思考方式。 </p><p>This kind of thinking will be part of the skill set of not only other scientists but of everyone else. Ubiquitous computing is to today as computational thinking is to tomorrow. Ubiquitous computing was yesterday’s dream that became today’s reality; computational thinking is tomorrow’s reality.</p><p>这种思维将成为不仅仅是其他科学家，而且是其他每一个人的技能组合之部分。普在计算之于今天就是计算思维之于明天。普在计算是已变为今日之现实的昨日之梦，计算思维就是明日之现实。 </p><p>WHAT IT IS, AND ISN’T</p><p>它是什么，又不是什么 </p><p>Computer science is the study of computation— what can be computed and how to compute it. Computational thinking thus has the following characteristics:</p><p>计算机科学是计算的学问——什么是可计算的，怎样去计算。因此，计算思维具有以下特性： </p><p>Conceptualizing, not programming. Computer science is not computer programming. Thinking like a computer scientist means more than being able to program a computer. It requires thinking at multiple levels of abstraction;</p><p>概念化，不是程序化。计算机科学不是计算机编程。像计算机科学家那样去思维意味着远远不止能为计算机编程。它要求能够在抽象的多个层次上思维。 </p><p>Fundamental, not rote skill. A fundamental skill is something every human being must know to function in modern society. Rote means a mechanical routine. Ironically, not until computer science solves the AI Grand Challenge of making computers think like humans will thinking be rote;</p><p>基础的，不是机械的技能。基础的技能是每一个人为了在现代社会中发挥职能所必须掌握的。生搬硬套之机械的技能意味着机械的重复。具有讽刺意味的是，只有当计算机科学解决了人工智能的宏伟挑战——使计算机像人类一样思考之后，思维才会变成机械的生搬硬套。 </p><p>A way that humans, not computers, think. Computational thinking is a way humans solve problems; it is not trying to get humans to think like computers. Computers are dull and boring; humans are clever and imaginative. We humans make computers exciting. Equipped with computing devices, we use our cleverness to tackle problems we would not dare take on before the age of computing and build systems with functionality limited only by our imaginations;</p><p>人的，不是计算机的思维。计算思维是人类求解问题的一条途径，但决非试图使人类像计算机那样地思考。计算机枯燥且沉闷；人类聪颖且富有想象力。我们人类赋予计算机以激情。配置了计算设备，我们就能用自己的智慧去解决那些计算时代之前不敢尝试的问题，就能建造那些其功能仅仅受制于我们想象力的系统。 </p><p>Complements and combines mathematical and engineering thinking. Computer science inherently draws on mathematical thinking, given that, like all sciences, its formal foundations rest on mathematics. Computer science inherently draws on engineering thinking, given that we build systems that interact with the real world. The constraints of the underlying computing device force computer scientists to think computationally, not just mathematically. Being free to build virtual worlds enables us to engineer systems beyond the physical world;</p><p>数学和工程思维的互补与融合。计算机科学在本质上源自数学思维，因为像所有的科学一样，它的形式化解析基础筑于数学之上。计算机科学又从本质上源自工程思维，因为我们建造的是能够与实际世界互动的系统。基本计算设备的限制迫使计算机学家必须计算性地思考，不能只是数学性地思考。构建虚拟世界的自由使我们能够超越物理世界去打造各种系统。 </p><p>Ideas, not artifacts. It’s not just the software and hardware artifacts we produce that will be physically present everywhere and touch our lives all the time, it will be the computational concepts we use to approach and solve problems, manage our daily lives, and communicate and interact with other people; and</p><p>是思想，不是人造品。不只是我们生产的软件硬件人造品将以物理形式到处呈现并时时刻刻触及我们的生活，更重要的是还将有我们用以接近和求解问题、管理日常生活、与他人交流和互动之计算性的概念；而且， </p><p>For everyone, everywhere. Computational thinking will be a reality when it is so integral to human endeavors it disappears as an explicit philosophy.</p><p>面向所有的人，所有地方。当计算思维真正融入人类活动的整体以致不再是一种显式之哲学的时候，它就将成为现实。 </p><p>Many people equate computer science with computer programming. Some parents see only a narrow range of job opportunities for their children who major in computer science. Many people think the fundamental research in computer science is done and that only the engineering remains. Computational thinking is a grand vision to guide computer science educators, researchers, and practitioners as we act to change society’s image of the field. We especially need to reach the pre-college audience, including teachers, parents, and students, sending them two main messages:</p><p>许多人将计算机科学等同于计算机编程。有些家长为他们主修计算机科学的孩子看到的只是一个狭窄的就业范围。许多人认为计算机科学的基础研究已经完成，剩下的只是工程部分而已。当我们行动起来去改变这一领域的社会形象时，计算思维就是一个引导着计算机教育家、研究者和实践者的宏大愿景。我们特别需要走进大学之前的听众，包括老师、父母、学生，向他们传送两个主要信息： </p><p>Intellectually challenging and engaging scientific problems remain to be understood and solved. The problem domain and solution domain are limited only by our own curiosity and creativity; and</p><p>智力上极有挑战性并且引人入胜的科学问题依旧亟待理解和解决。这些问题的范围和解决方案的范围之唯一局限就是我们自己的好奇心和创造力；同时 </p><p>One can major in computer science and do anything. One can major in English or mathematics and go on to a multitude of different careers. Ditto computer science. One can major in computer science and go on to a career in medicine, law, business, politics, any type of science or engineering, and even the arts.</p><p>一个人可以主修计算机科学并且干什么都行。一个人可以主修英语或者数学，接着从事各种各样的职业。计算机科学也一样。一个人可以主修计算机科学，接着从事医学、法律、商业、政治，以及任何类型的科学和工程，甚至艺术工作。 </p><p>Professors of computer science should teach a course called “Ways to Think Like a Computer Scientist” to college freshmen, making it available to non-majors, not just to computer science majors. We should expose pre-college students to computational methods and models. Rather than bemoan the decline of interest in computer science or the decline in funding for research in computer science, we should look to inspire the public’s interest in the intellectual adventure of the field. We’ll thus spread the joy, awe, and power of computer science, aiming to make computational thinking commonplace.</p><p>计算机科学的教授应当为大学新生开一门称为“怎么像计算机科学家一样思维”的课，面向非专业的，而不仅仅是计算机科学专业的学生。我们应当使大学之前的学生接触计算的方法和模型。我们应当设法激发公众对于计算机领域中的科学探索之兴趣，而不是悲叹对其兴趣的衰落或者哀泣其研究经费的下降。所以，我们应当传播计算机科学的快乐、崇高和力量，致力于计算思维的常识化。</p><p>本文引用地址：<a href="http://blog.sciencenet.cn/home.php?mod=space&amp;uid=2374&amp;do=blog&amp;id=8104">http://blog.sciencenet.cn/home.php?mod=space&amp;uid=2374&amp;do=blog&amp;id=8104</a> </p><p>相关文章:从计算思维到计算文化:<a href="http://blog.sciencenet.cn/home.php?mod=space&amp;uid=2374&amp;do=blog&amp;id=8105">http://blog.sciencenet.cn/home.php?mod=space&amp;uid=2374&amp;do=blog&amp;id=8105</a></p><p>蒲定东补：</p><p>周以真在文中提及</p><p>Computational thinking is reformulating a seemingly difficult problem into one we know how to solve, perhaps by reduction, embedding, transformation, or simulation.</p><p>计算思维就是把一个看来困难的问题重新阐述成一个我们知道怎样解的问题，如通过约简、嵌入、转化和仿真的方法。 </p><p>计算思维：解构、模式识别、模式归纳（抽象）、算法设计；<br>抽象思维：破解、离散、变换、拟合；<br>信息工程思维：数据化、建模、计算、仿真；<br>诗格：起、承、转、合；<br>修辞格：隐喻、反讽、转喻、提喻；<br>古希腊哲人爱比克泰德的哲思：物是，如其然；物已非，其惘然；物既非，不然其然；物复是，如其未然；<br>《周易》占卜：元、亨、利、贞；</p><p>本文发表于2007年第3卷第11期的中国计算机学会通讯。 </p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thinking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统-实验楼</title>
      <link href="/2018/06/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%AE%9E%E9%AA%8C%E6%A5%BC/"/>
      <url>/2018/06/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%AE%9E%E9%AA%8C%E6%A5%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="实验楼-（一）熟悉实验环境"><a href="#实验楼-（一）熟悉实验环境" class="headerlink" title="实验楼  （一）熟悉实验环境"></a>实验楼  （一）熟悉实验环境</h2><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><ul><li>cd /home/shiyanlou/oslab/    进入 oslab 所在文件夹 </li><li>tar -zxvf hit-oslab-linux-20110823.tar.gz -C /home/shiyanlou/  解压到指定文件夹<br>-ls -al 查看解压是否成功</li></ul><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><ul><li>Image<ul><li>宿主系统编译之后的目标文件</li></ul></li><li>bochs</li><li>run (运行bochs的脚本)</li><li>hdc-0.11.img<ul><li>Bash shell</li><li>basic linux orders  .   cp rm mv tar…</li><li>vi 编辑器</li><li>gcc 1.4编译器</li><li>as86 and ld86</li><li>linux 源代码</li></ul></li></ul><h3 id="准备编译"><a href="#准备编译" class="headerlink" title="准备编译"></a>准备编译</h3><ul><li>pwd   确认当前目录位于oslab</li><li>ls -l   列出目录内容</li></ul><h3 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h3><ul><li><p>开始</p><ul><li>cd ./linux-0.11/</li><li>make all   (make -j 2)  || make clean &amp;&amp; make all</li><li>关闭 run 窗口</li></ul></li><li><p>运行</p><ul><li>cd ~/oslab/</li><li>./run  =&gt; [/user/root]#</li></ul></li><li><p>调试</p><ul><li>汇编级调试</li><li>cd ~/oslab/</li><li>./dbg-asm =&gt; 黑屏</li><li>C 语言级调试</li><li>cd ~/oslab</li><li>./dbg-c</li><li>再打开一个终端接口</li><li>cd ~/oslab/<br>-./rungdb</li></ul></li><li><p>文件交换</p><ul><li><p>cd ~/oslab/</p></li><li><p>sudo ./mount-hdc 启动挂载脚本 （可以在 Ubuntu 的 hdc 目录下创建一个 xxx.c 文件，然后用编辑器编辑器）</p></li><li><p>cd ~/oslab/hdc  进入挂载到hdc的目录</p></li><li><p>ls -al 查看内容</p></li><li><p>cd ~/oslab/</p></li><li><p>sudo umount hdc 卸载文件系统 （执行后再进入 linux0.11，会看到上述 xxx.c 文件）</p></li></ul></li></ul><h2 id="实验二-操作系统的引导"><a href="#实验二-操作系统的引导" class="headerlink" title="实验二 操作系统的引导"></a>实验二 操作系统的引导</h2><h3 id="编译与运行"><a href="#编译与运行" class="headerlink" title="编译与运行"></a>编译与运行</h3><ul><li><p>进入  ~/oslab/linux-0.11/boot/</p></li><li><p>bootsect.s </p><p>as86 -0 -a -o bootsect.o bootsect.s<br>​ld86 -0 -s -o bootsect bootsect.o</p></li></ul><h4 id="五种存储器寻址方式。"><a href="#五种存储器寻址方式。" class="headerlink" title="五种存储器寻址方式。"></a>五种存储器寻址方式。</h4><ul><li>立即寻址方式(Immediate addressing)</li><li>寄存器寻址方式(Register addressing)</li><li>直接寻址方式(Direct addressing)</li><li>寄存器间接寻址方式(Register indirect addressing)</li><li>寄存器相对寻址方式(Register relative addressing)</li><li>基址变址寻址方式(Based indexed addressing)</li><li>相对基址变址寻址方式(Relative based indexed addressing)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML 基础-实验楼</title>
      <link href="/2018/06/07/HTML%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C%E6%A5%BC/"/>
      <url>/2018/06/07/HTML%E5%9F%BA%E7%A1%80-%E5%AE%9E%E9%AA%8C%E6%A5%BC/</url>
      
        <content type="html"><![CDATA[<h4 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h4><p>HTTP/1.1 定义的请求方法有 8 种：GET、POST、PUT、DELETE、PATCH、HEAD、OPTIONS、TRACE。最常的两种是 GET 和 POST，如果是 RESTful 接口的话一般会用到 GET、POST、DELETE、PUT。</p><h4 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h4><ul><li>200 ：成功。</li><li>400 ：客户端请求有语法错误，服务器端不能理解。</li><li>401 ：该请求可能未经过授权。</li><li>403 ：服务器端收到该请求，但是拒绝为它提供服务，可能是没有权限等等。</li><li>404 ：该资源没找到。</li><li>500 ：服务器端发生了一个不可预知的错误。</li><li>503 ：服务器端当前还不能处理客户端的这个请求，可能过段时间之后才能恢复正常。</li></ul><h4 id="浏览器的访问过程具体是什么呢？"><a href="#浏览器的访问过程具体是什么呢？" class="headerlink" title="浏览器的访问过程具体是什么呢？"></a>浏览器的访问过程具体是什么呢？</h4><ol><li>首先浏览器请求 DNS 服务器，通过 DNS 获取相应的域名对应的 IP。</li><li>通过 IP 与目的主机建立 TCP 连接。</li><li>发送和接受数据（获取网页内容）。</li><li>断开 TCP 连接。</li></ol><h4 id="文件的上传与下载到底是怎么回事？-前端的各种处理方式："><a href="#文件的上传与下载到底是怎么回事？-前端的各种处理方式：" class="headerlink" title="文件的上传与下载到底是怎么回事？ 前端的各种处理方式："></a>文件的上传与下载到底是怎么回事？ 前端的各种处理方式：</h4><ul><li>传统 flash 上传</li><li>新增 iframe 框 ajax 上传</li><li>表单数据提交</li><li>HTML5 的新工具——File API</li></ul><h4 id="iframe-框-Ajax-上传和表单数据提交："><a href="#iframe-框-Ajax-上传和表单数据提交：" class="headerlink" title="iframe 框 Ajax 上传和表单数据提交："></a>iframe 框 Ajax 上传和表单数据提交：</h4><ul><li>iframe 框上传：通过新建一个隐藏的 iframe 框，把数据放到这个 iframe 框架里，然后把它提交到服务器端处理，服务器返回的信息也是由 iframe 框调用父框架的方法处理。</li><li>表单数据提交：重点有两个，一个是 FormData 的数据对象，一个是 level2 的 XMLHttpRequest 对象。</li></ul><h4 id="有序列表（ol）"><a href="#有序列表（ol）" class="headerlink" title="有序列表（ol）"></a>有序列表（ol）</h4><p>定义：有序列表是一列项目，列表项目使用数字进行标记。有序列表始于<ol> 标签。每个列表项始于 <li> 标签。</p><ul><li>有序列表有 type 和 start 属性。</li><li>语法格式：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">value1</span> <span class="attr">start</span>=<span class="string">value2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：value1 表示有序列表项目符号的类型, value2 表示项目开始的数值。</p><table><thead><tr><th>type类型</th><th>描述</th></tr></thead><tbody><tr><td>type=1</td><td>表示列表项目用数字表示（1，2，3…)</td></tr><tr><td>type=a</td><td>表示列表项目用小写字母表示（a,b,c…)</td></tr><tr><td>type=A</td><td>表示列表项目用大写字母表示（A,B,C…)</td></tr><tr><td>type=i</td><td>表示列表项目用小写罗马数字表示(i,ii,iii….)</td></tr><tr><td>type=I</td><td>表示列表项目用大写罗马数字表示(I,II,III…)</td></tr></tbody></table><h4 id="自定义列表（dl）"><a href="#自定义列表（dl）" class="headerlink" title="自定义列表（dl）"></a>自定义列表（dl）</h4><p>定义：自定义列表不仅仅是一列项目，而是项目及其注释的组合。自定义列表以<dl> 标签开始。每个自定义列表项以 <dt> 开始。每个自定义列表项的定义以 <dd> 开始。自定义列表的列表项前没有任何项目符号。</p><p>语法格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="HTML-元数据"><a href="#HTML-元数据" class="headerlink" title="HTML 元数据"></a>HTML 元数据</h4><meta>标签提供关于 HTML 文档的元数据：描述（description）、关键词（keywords）、文档的作者（author）等其他元数据。<h4 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h4><ul><li>标题：header</li><li>导航栏：nav</li><li>主要内容：main 具有代表性的内容段落主题可以使用 article   section，div元素。</li><li>侧栏：aside经常嵌套在main中</li><li>页脚：footer</li></ul><h4 id="表单基本标签"><a href="#表单基本标签" class="headerlink" title="表单基本标签"></a>表单基本标签</h4><p>表格的其他常用属性：</p><p>colspan  合并行</p><p>rowspan 和并列</p><p>caption 定义标题</p><ul><li><p>thead：用于定义表格的头部，一般包含网页的logo和导航等头部信息,位于table之中。</p></li><li><p>tfoot：用于定义表格的页脚，一般包含网页底部的企业信息，地址联系方式等，位于table标记之中，thead标记之后。</p></li><li><p>tbody：用于定义表格的主体，一般包含网页中除头部和底部之外的其他内容，位于table标记之中，tfoot标记之后。</p><h5 id="注：案例-：搜狐股票"><a href="#注：案例-：搜狐股票" class="headerlink" title="注：案例 ：搜狐股票"></a>注：案例 ：搜狐股票</h5></li></ul><h4 id="多媒体嵌入"><a href="#多媒体嵌入" class="headerlink" title="多媒体嵌入"></a>多媒体嵌入</h4><ul><li><p>video </p></li><li><p>audio </p></li><li><p>音频播放器所占用的空间比视频播放器要小，由于没有视觉部件，只需要显示出能控制音频播放的控件。它不支持 width/height 属性。</p></li><li><p>iframe </p></li></ul><h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><p>表单在网页中主要负责数据采集功能。一个表单有三个基本组成部分：</p><ul><li>表单标签：这里面包含了处理表单数据所用 CGI 程序的 URL 以及数据提交到服务器的方法。</li><li>表单域：包含了文本框、密码框、隐藏域、多行文本框、复选框、单选框、下拉选择框和文件上传框等。</li><li>表单按钮：包括提交按钮、复位按钮和一般按钮；用于将数据传送到服务器上的 CGI 脚本或者取消输入，还可以用表单按钮来控制其他定义了处理脚本的处理工作。</li></ul><p>fieldset 元素组合表单中的相关数据，legend 元素为 fieldset元素定义标题。</p><p>label 标签的 for 属性应当与相关元素的 id 属性相同，使得label 标签与 input 正确相关联。</p><p>原生表单组件，主要包含文本输入框、单行文本框、e-mail 输入框、密码输入框、搜索框、电话号码输入框、URL 输入框、多行文本框、下拉组件、可勾选组件、按钮。</p><h4 id="文本输入框"><a href="#文本输入框" class="headerlink" title="文本输入框"></a>文本输入框</h4><p>所有文本域的通用规范：</p><ul><li><p>它们可以被标记为 readonly (用户不能修改输入值)甚至是 disabled (输入值永远不会与表单数据的其余部分一起发送)。</p></li><li><p>它们可以有一个 placeholder; 这是文本输入框中出现的文本，用来简略描述输入框的目的。</p></li><li><p>它们都受 size (输入框的物理尺寸) 和 length (文本框可以输入的最大字符数)约束。</p></li><li><p>如果浏览器支持的话，可以进行拼写检查。</p><p>文本区域在右下角有一个拖放操作，允许用户调整它的大小。这种调整能力可以通过使用 CSS 设置文本区域的 resize 值为 none 来关闭。</p></li></ul><h4 id="下拉组件"><a href="#下拉组件" class="headerlink" title="下拉组件"></a>下拉组件</h4><p>自动补全组件:</p><p> 使用 datalist 元素来为表单小部件提供建议 的、自动完成的值，并使用一些 option 子元素来指定要显示的值。然后使用 list 属性将数据列表绑定到一个文本域(通常是一个 input元素)。</p>]]></content>
      
      
      <categories>
          
          <category> FontEnd </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
